"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/got";
exports.ids = ["vendor-chunks/got"];
exports.modules = {

/***/ "(rsc)/./node_modules/got/dist/source/as-promise/create-rejection.js":
/*!*********************************************************************!*\
  !*** ./node_modules/got/dist/source/as-promise/create-rejection.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/got/dist/source/as-promise/types.js\");\nfunction createRejection(error, ...beforeErrorGroups) {\n    const promise = (async () => {\n        if (error instanceof types_1.RequestError) {\n            try {\n                for (const hooks of beforeErrorGroups) {\n                    if (hooks) {\n                        for (const hook of hooks) {\n                            // eslint-disable-next-line no-await-in-loop\n                            error = await hook(error);\n                        }\n                    }\n                }\n            }\n            catch (error_) {\n                error = error_;\n            }\n        }\n        throw error;\n    })();\n    const returnPromise = () => promise;\n    promise.json = returnPromise;\n    promise.text = returnPromise;\n    promise.buffer = returnPromise;\n    promise.on = returnPromise;\n    return promise;\n}\nexports[\"default\"] = createRejection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvY3JlYXRlLXJlamVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyx5RUFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsiQzpcXEhhY2thdGhvblxcSGFja3NwaXJlXFxub2RlX21vZHVsZXNcXGdvdFxcZGlzdFxcc291cmNlXFxhcy1wcm9taXNlXFxjcmVhdGUtcmVqZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuZnVuY3Rpb24gY3JlYXRlUmVqZWN0aW9uKGVycm9yLCAuLi5iZWZvcmVFcnJvckdyb3Vwcykge1xuICAgIGNvbnN0IHByb21pc2UgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiB0eXBlc18xLlJlcXVlc3RFcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhvb2tzIG9mIGJlZm9yZUVycm9yR3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBob29rIG9mIGhvb2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWF3YWl0LWluLWxvb3BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGF3YWl0IGhvb2soZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yXykge1xuICAgICAgICAgICAgICAgIGVycm9yID0gZXJyb3JfO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH0pKCk7XG4gICAgY29uc3QgcmV0dXJuUHJvbWlzZSA9ICgpID0+IHByb21pc2U7XG4gICAgcHJvbWlzZS5qc29uID0gcmV0dXJuUHJvbWlzZTtcbiAgICBwcm9taXNlLnRleHQgPSByZXR1cm5Qcm9taXNlO1xuICAgIHByb21pc2UuYnVmZmVyID0gcmV0dXJuUHJvbWlzZTtcbiAgICBwcm9taXNlLm9uID0gcmV0dXJuUHJvbWlzZTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVJlamVjdGlvbjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/as-promise/create-rejection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/as-promise/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/got/dist/source/as-promise/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst PCancelable = __webpack_require__(/*! p-cancelable */ \"(rsc)/./node_modules/p-cancelable/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/got/dist/source/as-promise/types.js\");\nconst parse_body_1 = __webpack_require__(/*! ./parse-body */ \"(rsc)/./node_modules/got/dist/source/as-promise/parse-body.js\");\nconst core_1 = __webpack_require__(/*! ../core */ \"(rsc)/./node_modules/got/dist/source/core/index.js\");\nconst proxy_events_1 = __webpack_require__(/*! ../core/utils/proxy-events */ \"(rsc)/./node_modules/got/dist/source/core/utils/proxy-events.js\");\nconst get_buffer_1 = __webpack_require__(/*! ../core/utils/get-buffer */ \"(rsc)/./node_modules/got/dist/source/core/utils/get-buffer.js\");\nconst is_response_ok_1 = __webpack_require__(/*! ../core/utils/is-response-ok */ \"(rsc)/./node_modules/got/dist/source/core/utils/is-response-ok.js\");\nconst proxiedRequestEvents = [\n    'request',\n    'response',\n    'redirect',\n    'uploadProgress',\n    'downloadProgress'\n];\nfunction asPromise(normalizedOptions) {\n    let globalRequest;\n    let globalResponse;\n    const emitter = new events_1.EventEmitter();\n    const promise = new PCancelable((resolve, reject, onCancel) => {\n        const makeRequest = (retryCount) => {\n            const request = new core_1.default(undefined, normalizedOptions);\n            request.retryCount = retryCount;\n            request._noPipe = true;\n            onCancel(() => request.destroy());\n            onCancel.shouldReject = false;\n            onCancel(() => reject(new types_1.CancelError(request)));\n            globalRequest = request;\n            request.once('response', async (response) => {\n                var _a;\n                response.retryCount = retryCount;\n                if (response.request.aborted) {\n                    // Canceled while downloading - will throw a `CancelError` or `TimeoutError` error\n                    return;\n                }\n                // Download body\n                let rawBody;\n                try {\n                    rawBody = await get_buffer_1.default(request);\n                    response.rawBody = rawBody;\n                }\n                catch (_b) {\n                    // The same error is caught below.\n                    // See request.once('error')\n                    return;\n                }\n                if (request._isAboutToError) {\n                    return;\n                }\n                // Parse body\n                const contentEncoding = ((_a = response.headers['content-encoding']) !== null && _a !== void 0 ? _a : '').toLowerCase();\n                const isCompressed = ['gzip', 'deflate', 'br'].includes(contentEncoding);\n                const { options } = request;\n                if (isCompressed && !options.decompress) {\n                    response.body = rawBody;\n                }\n                else {\n                    try {\n                        response.body = parse_body_1.default(response, options.responseType, options.parseJson, options.encoding);\n                    }\n                    catch (error) {\n                        // Fallback to `utf8`\n                        response.body = rawBody.toString();\n                        if (is_response_ok_1.isResponseOk(response)) {\n                            request._beforeError(error);\n                            return;\n                        }\n                    }\n                }\n                try {\n                    for (const [index, hook] of options.hooks.afterResponse.entries()) {\n                        // @ts-expect-error TS doesn't notice that CancelableRequest is a Promise\n                        // eslint-disable-next-line no-await-in-loop\n                        response = await hook(response, async (updatedOptions) => {\n                            const typedOptions = core_1.default.normalizeArguments(undefined, {\n                                ...updatedOptions,\n                                retry: {\n                                    calculateDelay: () => 0\n                                },\n                                throwHttpErrors: false,\n                                resolveBodyOnly: false\n                            }, options);\n                            // Remove any further hooks for that request, because we'll call them anyway.\n                            // The loop continues. We don't want duplicates (asPromise recursion).\n                            typedOptions.hooks.afterResponse = typedOptions.hooks.afterResponse.slice(0, index);\n                            for (const hook of typedOptions.hooks.beforeRetry) {\n                                // eslint-disable-next-line no-await-in-loop\n                                await hook(typedOptions);\n                            }\n                            const promise = asPromise(typedOptions);\n                            onCancel(() => {\n                                promise.catch(() => { });\n                                promise.cancel();\n                            });\n                            return promise;\n                        });\n                    }\n                }\n                catch (error) {\n                    request._beforeError(new types_1.RequestError(error.message, error, request));\n                    return;\n                }\n                globalResponse = response;\n                if (!is_response_ok_1.isResponseOk(response)) {\n                    request._beforeError(new types_1.HTTPError(response));\n                    return;\n                }\n                request.destroy();\n                resolve(request.options.resolveBodyOnly ? response.body : response);\n            });\n            const onError = (error) => {\n                if (promise.isCanceled) {\n                    return;\n                }\n                const { options } = request;\n                if (error instanceof types_1.HTTPError && !options.throwHttpErrors) {\n                    const { response } = error;\n                    resolve(request.options.resolveBodyOnly ? response.body : response);\n                    return;\n                }\n                reject(error);\n            };\n            request.once('error', onError);\n            const previousBody = request.options.body;\n            request.once('retry', (newRetryCount, error) => {\n                var _a, _b;\n                if (previousBody === ((_a = error.request) === null || _a === void 0 ? void 0 : _a.options.body) && is_1.default.nodeStream((_b = error.request) === null || _b === void 0 ? void 0 : _b.options.body)) {\n                    onError(error);\n                    return;\n                }\n                makeRequest(newRetryCount);\n            });\n            proxy_events_1.default(request, emitter, proxiedRequestEvents);\n        };\n        makeRequest(0);\n    });\n    promise.on = (event, fn) => {\n        emitter.on(event, fn);\n        return promise;\n    };\n    const shortcut = (responseType) => {\n        const newPromise = (async () => {\n            // Wait until downloading has ended\n            await promise;\n            const { options } = globalResponse.request;\n            return parse_body_1.default(globalResponse, responseType, options.parseJson, options.encoding);\n        })();\n        Object.defineProperties(newPromise, Object.getOwnPropertyDescriptors(promise));\n        return newPromise;\n    };\n    promise.json = () => {\n        const { headers } = globalRequest.options;\n        if (!globalRequest.writableFinished && headers.accept === undefined) {\n            headers.accept = 'application/json';\n        }\n        return shortcut('json');\n    };\n    promise.buffer = () => shortcut('buffer');\n    promise.text = () => shortcut('text');\n    return promise;\n}\nexports[\"default\"] = asPromise;\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/got/dist/source/as-promise/types.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsbUNBQW1DLG9DQUFvQyxnQkFBZ0I7QUFDdkYsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyw2RUFBa0I7QUFDdkMsb0JBQW9CLG1CQUFPLENBQUMsZ0VBQWM7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMseUVBQVM7QUFDakMscUJBQXFCLG1CQUFPLENBQUMsbUZBQWM7QUFDM0MsZUFBZSxtQkFBTyxDQUFDLG1FQUFTO0FBQ2hDLHVCQUF1QixtQkFBTyxDQUFDLG1HQUE0QjtBQUMzRCxxQkFBcUIsbUJBQU8sQ0FBQywrRkFBMEI7QUFDdkQseUJBQXlCLG1CQUFPLENBQUMsdUdBQThCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsVUFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixVQUFVO0FBQ2xDO0FBQ0EsNEJBQTRCLFdBQVc7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixVQUFVO0FBQzlCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFVBQVU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMseUVBQVMiLCJzb3VyY2VzIjpbIkM6XFxIYWNrYXRob25cXEhhY2tzcGlyZVxcbm9kZV9tb2R1bGVzXFxnb3RcXGRpc3RcXHNvdXJjZVxcYXMtcHJvbWlzZVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmNvbnN0IGlzXzEgPSByZXF1aXJlKFwiQHNpbmRyZXNvcmh1cy9pc1wiKTtcbmNvbnN0IFBDYW5jZWxhYmxlID0gcmVxdWlyZShcInAtY2FuY2VsYWJsZVwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmNvbnN0IHBhcnNlX2JvZHlfMSA9IHJlcXVpcmUoXCIuL3BhcnNlLWJvZHlcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi4vY29yZVwiKTtcbmNvbnN0IHByb3h5X2V2ZW50c18xID0gcmVxdWlyZShcIi4uL2NvcmUvdXRpbHMvcHJveHktZXZlbnRzXCIpO1xuY29uc3QgZ2V0X2J1ZmZlcl8xID0gcmVxdWlyZShcIi4uL2NvcmUvdXRpbHMvZ2V0LWJ1ZmZlclwiKTtcbmNvbnN0IGlzX3Jlc3BvbnNlX29rXzEgPSByZXF1aXJlKFwiLi4vY29yZS91dGlscy9pcy1yZXNwb25zZS1va1wiKTtcbmNvbnN0IHByb3hpZWRSZXF1ZXN0RXZlbnRzID0gW1xuICAgICdyZXF1ZXN0JyxcbiAgICAncmVzcG9uc2UnLFxuICAgICdyZWRpcmVjdCcsXG4gICAgJ3VwbG9hZFByb2dyZXNzJyxcbiAgICAnZG93bmxvYWRQcm9ncmVzcydcbl07XG5mdW5jdGlvbiBhc1Byb21pc2Uobm9ybWFsaXplZE9wdGlvbnMpIHtcbiAgICBsZXQgZ2xvYmFsUmVxdWVzdDtcbiAgICBsZXQgZ2xvYmFsUmVzcG9uc2U7XG4gICAgY29uc3QgZW1pdHRlciA9IG5ldyBldmVudHNfMS5FdmVudEVtaXR0ZXIoKTtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFBDYW5jZWxhYmxlKChyZXNvbHZlLCByZWplY3QsIG9uQ2FuY2VsKSA9PiB7XG4gICAgICAgIGNvbnN0IG1ha2VSZXF1ZXN0ID0gKHJldHJ5Q291bnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgY29yZV8xLmRlZmF1bHQodW5kZWZpbmVkLCBub3JtYWxpemVkT3B0aW9ucyk7XG4gICAgICAgICAgICByZXF1ZXN0LnJldHJ5Q291bnQgPSByZXRyeUNvdW50O1xuICAgICAgICAgICAgcmVxdWVzdC5fbm9QaXBlID0gdHJ1ZTtcbiAgICAgICAgICAgIG9uQ2FuY2VsKCgpID0+IHJlcXVlc3QuZGVzdHJveSgpKTtcbiAgICAgICAgICAgIG9uQ2FuY2VsLnNob3VsZFJlamVjdCA9IGZhbHNlO1xuICAgICAgICAgICAgb25DYW5jZWwoKCkgPT4gcmVqZWN0KG5ldyB0eXBlc18xLkNhbmNlbEVycm9yKHJlcXVlc3QpKSk7XG4gICAgICAgICAgICBnbG9iYWxSZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICAgICAgICAgIHJlcXVlc3Qub25jZSgncmVzcG9uc2UnLCBhc3luYyAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UucmV0cnlDb3VudCA9IHJldHJ5Q291bnQ7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJlcXVlc3QuYWJvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDYW5jZWxlZCB3aGlsZSBkb3dubG9hZGluZyAtIHdpbGwgdGhyb3cgYSBgQ2FuY2VsRXJyb3JgIG9yIGBUaW1lb3V0RXJyb3JgIGVycm9yXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRG93bmxvYWQgYm9keVxuICAgICAgICAgICAgICAgIGxldCByYXdCb2R5O1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJhd0JvZHkgPSBhd2FpdCBnZXRfYnVmZmVyXzEuZGVmYXVsdChyZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucmF3Qm9keSA9IHJhd0JvZHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChfYikge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgc2FtZSBlcnJvciBpcyBjYXVnaHQgYmVsb3cuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNlZSByZXF1ZXN0Lm9uY2UoJ2Vycm9yJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5faXNBYm91dFRvRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBQYXJzZSBib2R5XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudEVuY29kaW5nID0gKChfYSA9IHJlc3BvbnNlLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNDb21wcmVzc2VkID0gWydnemlwJywgJ2RlZmxhdGUnLCAnYnInXS5pbmNsdWRlcyhjb250ZW50RW5jb2RpbmcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gcmVxdWVzdDtcbiAgICAgICAgICAgICAgICBpZiAoaXNDb21wcmVzc2VkICYmICFvcHRpb25zLmRlY29tcHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuYm9keSA9IHJhd0JvZHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuYm9keSA9IHBhcnNlX2JvZHlfMS5kZWZhdWx0KHJlc3BvbnNlLCBvcHRpb25zLnJlc3BvbnNlVHlwZSwgb3B0aW9ucy5wYXJzZUpzb24sIG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmFsbGJhY2sgdG8gYHV0ZjhgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5ib2R5ID0gcmF3Qm9keS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzX3Jlc3BvbnNlX29rXzEuaXNSZXNwb25zZU9rKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuX2JlZm9yZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbaW5kZXgsIGhvb2tdIG9mIG9wdGlvbnMuaG9va3MuYWZ0ZXJSZXNwb25zZS5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgZG9lc24ndCBub3RpY2UgdGhhdCBDYW5jZWxhYmxlUmVxdWVzdCBpcyBhIFByb21pc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IGhvb2socmVzcG9uc2UsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVkT3B0aW9ucyA9IGNvcmVfMS5kZWZhdWx0Lm5vcm1hbGl6ZUFyZ3VtZW50cyh1bmRlZmluZWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4udXBkYXRlZE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVEZWxheTogKCkgPT4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvd0h0dHBFcnJvcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQm9keU9ubHk6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGFueSBmdXJ0aGVyIGhvb2tzIGZvciB0aGF0IHJlcXVlc3QsIGJlY2F1c2Ugd2UnbGwgY2FsbCB0aGVtIGFueXdheS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbG9vcCBjb250aW51ZXMuIFdlIGRvbid0IHdhbnQgZHVwbGljYXRlcyAoYXNQcm9taXNlIHJlY3Vyc2lvbikuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZWRPcHRpb25zLmhvb2tzLmFmdGVyUmVzcG9uc2UgPSB0eXBlZE9wdGlvbnMuaG9va3MuYWZ0ZXJSZXNwb25zZS5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBob29rIG9mIHR5cGVkT3B0aW9ucy5ob29rcy5iZWZvcmVSZXRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBob29rKHR5cGVkT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSBhc1Byb21pc2UodHlwZWRPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNhbmNlbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2UuY2F0Y2goKCkgPT4geyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Ll9iZWZvcmVFcnJvcihuZXcgdHlwZXNfMS5SZXF1ZXN0RXJyb3IoZXJyb3IubWVzc2FnZSwgZXJyb3IsIHJlcXVlc3QpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnbG9iYWxSZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIGlmICghaXNfcmVzcG9uc2Vfb2tfMS5pc1Jlc3BvbnNlT2socmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuX2JlZm9yZUVycm9yKG5ldyB0eXBlc18xLkhUVFBFcnJvcihyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcXVlc3QuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmVxdWVzdC5vcHRpb25zLnJlc29sdmVCb2R5T25seSA/IHJlc3BvbnNlLmJvZHkgOiByZXNwb25zZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IG9uRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocHJvbWlzZS5pc0NhbmNlbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSByZXF1ZXN0O1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIHR5cGVzXzEuSFRUUEVycm9yICYmICFvcHRpb25zLnRocm93SHR0cEVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHJlc3BvbnNlIH0gPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXF1ZXN0Lm9wdGlvbnMucmVzb2x2ZUJvZHlPbmx5ID8gcmVzcG9uc2UuYm9keSA6IHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlcXVlc3Qub25jZSgnZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzQm9keSA9IHJlcXVlc3Qub3B0aW9ucy5ib2R5O1xuICAgICAgICAgICAgcmVxdWVzdC5vbmNlKCdyZXRyeScsIChuZXdSZXRyeUNvdW50LCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzQm9keSA9PT0gKChfYSA9IGVycm9yLnJlcXVlc3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vcHRpb25zLmJvZHkpICYmIGlzXzEuZGVmYXVsdC5ub2RlU3RyZWFtKChfYiA9IGVycm9yLnJlcXVlc3QpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vcHRpb25zLmJvZHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1ha2VSZXF1ZXN0KG5ld1JldHJ5Q291bnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcm94eV9ldmVudHNfMS5kZWZhdWx0KHJlcXVlc3QsIGVtaXR0ZXIsIHByb3hpZWRSZXF1ZXN0RXZlbnRzKTtcbiAgICAgICAgfTtcbiAgICAgICAgbWFrZVJlcXVlc3QoMCk7XG4gICAgfSk7XG4gICAgcHJvbWlzZS5vbiA9IChldmVudCwgZm4pID0+IHtcbiAgICAgICAgZW1pdHRlci5vbihldmVudCwgZm4pO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuICAgIGNvbnN0IHNob3J0Y3V0ID0gKHJlc3BvbnNlVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCBuZXdQcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIC8vIFdhaXQgdW50aWwgZG93bmxvYWRpbmcgaGFzIGVuZGVkXG4gICAgICAgICAgICBhd2FpdCBwcm9taXNlO1xuICAgICAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSBnbG9iYWxSZXNwb25zZS5yZXF1ZXN0O1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlX2JvZHlfMS5kZWZhdWx0KGdsb2JhbFJlc3BvbnNlLCByZXNwb25zZVR5cGUsIG9wdGlvbnMucGFyc2VKc29uLCBvcHRpb25zLmVuY29kaW5nKTtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobmV3UHJvbWlzZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocHJvbWlzZSkpO1xuICAgICAgICByZXR1cm4gbmV3UHJvbWlzZTtcbiAgICB9O1xuICAgIHByb21pc2UuanNvbiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBoZWFkZXJzIH0gPSBnbG9iYWxSZXF1ZXN0Lm9wdGlvbnM7XG4gICAgICAgIGlmICghZ2xvYmFsUmVxdWVzdC53cml0YWJsZUZpbmlzaGVkICYmIGhlYWRlcnMuYWNjZXB0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMuYWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaG9ydGN1dCgnanNvbicpO1xuICAgIH07XG4gICAgcHJvbWlzZS5idWZmZXIgPSAoKSA9PiBzaG9ydGN1dCgnYnVmZmVyJyk7XG4gICAgcHJvbWlzZS50ZXh0ID0gKCkgPT4gc2hvcnRjdXQoJ3RleHQnKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGFzUHJvbWlzZTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/as-promise/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/as-promise/normalize-arguments.js":
/*!************************************************************************!*\
  !*** ./node_modules/got/dist/source/as-promise/normalize-arguments.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst normalizeArguments = (options, defaults) => {\n    if (is_1.default.null_(options.encoding)) {\n        throw new TypeError('To get a Buffer, set `options.responseType` to `buffer` instead');\n    }\n    is_1.assert.any([is_1.default.string, is_1.default.undefined], options.encoding);\n    is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.resolveBodyOnly);\n    is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.methodRewriting);\n    is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.isStream);\n    is_1.assert.any([is_1.default.string, is_1.default.undefined], options.responseType);\n    // `options.responseType`\n    if (options.responseType === undefined) {\n        options.responseType = 'text';\n    }\n    // `options.retry`\n    const { retry } = options;\n    if (defaults) {\n        options.retry = { ...defaults.retry };\n    }\n    else {\n        options.retry = {\n            calculateDelay: retryObject => retryObject.computedValue,\n            limit: 0,\n            methods: [],\n            statusCodes: [],\n            errorCodes: [],\n            maxRetryAfter: undefined\n        };\n    }\n    if (is_1.default.object(retry)) {\n        options.retry = {\n            ...options.retry,\n            ...retry\n        };\n        options.retry.methods = [...new Set(options.retry.methods.map(method => method.toUpperCase()))];\n        options.retry.statusCodes = [...new Set(options.retry.statusCodes)];\n        options.retry.errorCodes = [...new Set(options.retry.errorCodes)];\n    }\n    else if (is_1.default.number(retry)) {\n        options.retry.limit = retry;\n    }\n    if (is_1.default.undefined(options.retry.maxRetryAfter)) {\n        options.retry.maxRetryAfter = Math.min(\n        // TypeScript is not smart enough to handle `.filter(x => is.number(x))`.\n        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n        ...[options.timeout.request, options.timeout.connect].filter(is_1.default.number));\n    }\n    // `options.pagination`\n    if (is_1.default.object(options.pagination)) {\n        if (defaults) {\n            options.pagination = {\n                ...defaults.pagination,\n                ...options.pagination\n            };\n        }\n        const { pagination } = options;\n        if (!is_1.default.function_(pagination.transform)) {\n            throw new Error('`options.pagination.transform` must be implemented');\n        }\n        if (!is_1.default.function_(pagination.shouldContinue)) {\n            throw new Error('`options.pagination.shouldContinue` must be implemented');\n        }\n        if (!is_1.default.function_(pagination.filter)) {\n            throw new TypeError('`options.pagination.filter` must be implemented');\n        }\n        if (!is_1.default.function_(pagination.paginate)) {\n            throw new Error('`options.pagination.paginate` must be implemented');\n        }\n    }\n    // JSON mode\n    if (options.responseType === 'json' && options.headers.accept === undefined) {\n        options.headers.accept = 'application/json';\n    }\n    return options;\n};\nexports[\"default\"] = normalizeArguments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2Uvbm9ybWFsaXplLWFyZ3VtZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsNkVBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlIiwic291cmNlcyI6WyJDOlxcSGFja2F0aG9uXFxIYWNrc3BpcmVcXG5vZGVfbW9kdWxlc1xcZ290XFxkaXN0XFxzb3VyY2VcXGFzLXByb21pc2VcXG5vcm1hbGl6ZS1hcmd1bWVudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpc18xID0gcmVxdWlyZShcIkBzaW5kcmVzb3JodXMvaXNcIik7XG5jb25zdCBub3JtYWxpemVBcmd1bWVudHMgPSAob3B0aW9ucywgZGVmYXVsdHMpID0+IHtcbiAgICBpZiAoaXNfMS5kZWZhdWx0Lm51bGxfKG9wdGlvbnMuZW5jb2RpbmcpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RvIGdldCBhIEJ1ZmZlciwgc2V0IGBvcHRpb25zLnJlc3BvbnNlVHlwZWAgdG8gYGJ1ZmZlcmAgaW5zdGVhZCcpO1xuICAgIH1cbiAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5zdHJpbmcsIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmVuY29kaW5nKTtcbiAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5ib29sZWFuLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5yZXNvbHZlQm9keU9ubHkpO1xuICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0LmJvb2xlYW4sIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLm1ldGhvZFJld3JpdGluZyk7XG4gICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuYm9vbGVhbiwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuaXNTdHJlYW0pO1xuICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0LnN0cmluZywgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMucmVzcG9uc2VUeXBlKTtcbiAgICAvLyBgb3B0aW9ucy5yZXNwb25zZVR5cGVgXG4gICAgaWYgKG9wdGlvbnMucmVzcG9uc2VUeXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3B0aW9ucy5yZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgfVxuICAgIC8vIGBvcHRpb25zLnJldHJ5YFxuICAgIGNvbnN0IHsgcmV0cnkgfSA9IG9wdGlvbnM7XG4gICAgaWYgKGRlZmF1bHRzKSB7XG4gICAgICAgIG9wdGlvbnMucmV0cnkgPSB7IC4uLmRlZmF1bHRzLnJldHJ5IH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvcHRpb25zLnJldHJ5ID0ge1xuICAgICAgICAgICAgY2FsY3VsYXRlRGVsYXk6IHJldHJ5T2JqZWN0ID0+IHJldHJ5T2JqZWN0LmNvbXB1dGVkVmFsdWUsXG4gICAgICAgICAgICBsaW1pdDogMCxcbiAgICAgICAgICAgIG1ldGhvZHM6IFtdLFxuICAgICAgICAgICAgc3RhdHVzQ29kZXM6IFtdLFxuICAgICAgICAgICAgZXJyb3JDb2RlczogW10sXG4gICAgICAgICAgICBtYXhSZXRyeUFmdGVyOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzXzEuZGVmYXVsdC5vYmplY3QocmV0cnkpKSB7XG4gICAgICAgIG9wdGlvbnMucmV0cnkgPSB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLnJldHJ5LFxuICAgICAgICAgICAgLi4ucmV0cnlcbiAgICAgICAgfTtcbiAgICAgICAgb3B0aW9ucy5yZXRyeS5tZXRob2RzID0gWy4uLm5ldyBTZXQob3B0aW9ucy5yZXRyeS5tZXRob2RzLm1hcChtZXRob2QgPT4gbWV0aG9kLnRvVXBwZXJDYXNlKCkpKV07XG4gICAgICAgIG9wdGlvbnMucmV0cnkuc3RhdHVzQ29kZXMgPSBbLi4ubmV3IFNldChvcHRpb25zLnJldHJ5LnN0YXR1c0NvZGVzKV07XG4gICAgICAgIG9wdGlvbnMucmV0cnkuZXJyb3JDb2RlcyA9IFsuLi5uZXcgU2V0KG9wdGlvbnMucmV0cnkuZXJyb3JDb2RlcyldO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc18xLmRlZmF1bHQubnVtYmVyKHJldHJ5KSkge1xuICAgICAgICBvcHRpb25zLnJldHJ5LmxpbWl0ID0gcmV0cnk7XG4gICAgfVxuICAgIGlmIChpc18xLmRlZmF1bHQudW5kZWZpbmVkKG9wdGlvbnMucmV0cnkubWF4UmV0cnlBZnRlcikpIHtcbiAgICAgICAgb3B0aW9ucy5yZXRyeS5tYXhSZXRyeUFmdGVyID0gTWF0aC5taW4oXG4gICAgICAgIC8vIFR5cGVTY3JpcHQgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBoYW5kbGUgYC5maWx0ZXIoeCA9PiBpcy5udW1iZXIoeCkpYC5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tZm4tcmVmZXJlbmNlLWluLWl0ZXJhdG9yXG4gICAgICAgIC4uLltvcHRpb25zLnRpbWVvdXQucmVxdWVzdCwgb3B0aW9ucy50aW1lb3V0LmNvbm5lY3RdLmZpbHRlcihpc18xLmRlZmF1bHQubnVtYmVyKSk7XG4gICAgfVxuICAgIC8vIGBvcHRpb25zLnBhZ2luYXRpb25gXG4gICAgaWYgKGlzXzEuZGVmYXVsdC5vYmplY3Qob3B0aW9ucy5wYWdpbmF0aW9uKSkge1xuICAgICAgICBpZiAoZGVmYXVsdHMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucGFnaW5hdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAuLi5kZWZhdWx0cy5wYWdpbmF0aW9uLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMucGFnaW5hdGlvblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHBhZ2luYXRpb24gfSA9IG9wdGlvbnM7XG4gICAgICAgIGlmICghaXNfMS5kZWZhdWx0LmZ1bmN0aW9uXyhwYWdpbmF0aW9uLnRyYW5zZm9ybSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYG9wdGlvbnMucGFnaW5hdGlvbi50cmFuc2Zvcm1gIG11c3QgYmUgaW1wbGVtZW50ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzXzEuZGVmYXVsdC5mdW5jdGlvbl8ocGFnaW5hdGlvbi5zaG91bGRDb250aW51ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYG9wdGlvbnMucGFnaW5hdGlvbi5zaG91bGRDb250aW51ZWAgbXVzdCBiZSBpbXBsZW1lbnRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNfMS5kZWZhdWx0LmZ1bmN0aW9uXyhwYWdpbmF0aW9uLmZpbHRlcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BvcHRpb25zLnBhZ2luYXRpb24uZmlsdGVyYCBtdXN0IGJlIGltcGxlbWVudGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc18xLmRlZmF1bHQuZnVuY3Rpb25fKHBhZ2luYXRpb24ucGFnaW5hdGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLnBhZ2luYXRpb24ucGFnaW5hdGVgIG11c3QgYmUgaW1wbGVtZW50ZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBKU09OIG1vZGVcbiAgICBpZiAob3B0aW9ucy5yZXNwb25zZVR5cGUgPT09ICdqc29uJyAmJiBvcHRpb25zLmhlYWRlcnMuYWNjZXB0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3B0aW9ucy5oZWFkZXJzLmFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gbm9ybWFsaXplQXJndW1lbnRzO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/as-promise/normalize-arguments.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/as-promise/parse-body.js":
/*!***************************************************************!*\
  !*** ./node_modules/got/dist/source/as-promise/parse-body.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/got/dist/source/as-promise/types.js\");\nconst parseBody = (response, responseType, parseJson, encoding) => {\n    const { rawBody } = response;\n    try {\n        if (responseType === 'text') {\n            return rawBody.toString(encoding);\n        }\n        if (responseType === 'json') {\n            return rawBody.length === 0 ? '' : parseJson(rawBody.toString());\n        }\n        if (responseType === 'buffer') {\n            return rawBody;\n        }\n        throw new types_1.ParseError({\n            message: `Unknown body type '${responseType}'`,\n            name: 'Error'\n        }, response);\n    }\n    catch (error) {\n        throw new types_1.ParseError(error, response);\n    }\n};\nexports[\"default\"] = parseBody;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvcGFyc2UtYm9keS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyx5RUFBUztBQUNqQztBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGFBQWE7QUFDeEQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlIiwic291cmNlcyI6WyJDOlxcSGFja2F0aG9uXFxIYWNrc3BpcmVcXG5vZGVfbW9kdWxlc1xcZ290XFxkaXN0XFxzb3VyY2VcXGFzLXByb21pc2VcXHBhcnNlLWJvZHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBwYXJzZUJvZHkgPSAocmVzcG9uc2UsIHJlc3BvbnNlVHlwZSwgcGFyc2VKc29uLCBlbmNvZGluZykgPT4ge1xuICAgIGNvbnN0IHsgcmF3Qm9keSB9ID0gcmVzcG9uc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICByZXR1cm4gcmF3Qm9keS50b1N0cmluZyhlbmNvZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gcmF3Qm9keS5sZW5ndGggPT09IDAgPyAnJyA6IHBhcnNlSnNvbihyYXdCb2R5LnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZVR5cGUgPT09ICdidWZmZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gcmF3Qm9keTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgdHlwZXNfMS5QYXJzZUVycm9yKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBVbmtub3duIGJvZHkgdHlwZSAnJHtyZXNwb25zZVR5cGV9J2AsXG4gICAgICAgICAgICBuYW1lOiAnRXJyb3InXG4gICAgICAgIH0sIHJlc3BvbnNlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyB0eXBlc18xLlBhcnNlRXJyb3IoZXJyb3IsIHJlc3BvbnNlKTtcbiAgICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gcGFyc2VCb2R5O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/as-promise/parse-body.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/as-promise/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/got/dist/source/as-promise/types.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CancelError = exports.ParseError = void 0;\nconst core_1 = __webpack_require__(/*! ../core */ \"(rsc)/./node_modules/got/dist/source/core/index.js\");\n/**\nAn error to be thrown when server response code is 2xx, and parsing body fails.\nIncludes a `response` property.\n*/\nclass ParseError extends core_1.RequestError {\n    constructor(error, response) {\n        const { options } = response.request;\n        super(`${error.message} in \"${options.url.toString()}\"`, error, response.request);\n        this.name = 'ParseError';\n        this.code = this.code === 'ERR_GOT_REQUEST_ERROR' ? 'ERR_BODY_PARSE_FAILURE' : this.code;\n    }\n}\nexports.ParseError = ParseError;\n/**\nAn error to be thrown when the request is aborted with `.cancel()`.\n*/\nclass CancelError extends core_1.RequestError {\n    constructor(request) {\n        super('Promise was canceled', {}, request);\n        this.name = 'CancelError';\n        this.code = 'ERR_CANCELED';\n    }\n    get isCanceled() {\n        return true;\n    }\n}\nexports.CancelError = CancelError;\n__exportStar(__webpack_require__(/*! ../core */ \"(rsc)/./node_modules/got/dist/source/core/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsbUNBQW1DLG9DQUFvQyxnQkFBZ0I7QUFDdkYsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLGtCQUFrQjtBQUN4QyxlQUFlLG1CQUFPLENBQUMsbUVBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFVBQVU7QUFDMUIsaUJBQWlCLGVBQWUsTUFBTSx1QkFBdUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixhQUFhLG1CQUFPLENBQUMsbUVBQVMiLCJzb3VyY2VzIjpbIkM6XFxIYWNrYXRob25cXEhhY2tzcGlyZVxcbm9kZV9tb2R1bGVzXFxnb3RcXGRpc3RcXHNvdXJjZVxcYXMtcHJvbWlzZVxcdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2FuY2VsRXJyb3IgPSBleHBvcnRzLlBhcnNlRXJyb3IgPSB2b2lkIDA7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi4vY29yZVwiKTtcbi8qKlxuQW4gZXJyb3IgdG8gYmUgdGhyb3duIHdoZW4gc2VydmVyIHJlc3BvbnNlIGNvZGUgaXMgMnh4LCBhbmQgcGFyc2luZyBib2R5IGZhaWxzLlxuSW5jbHVkZXMgYSBgcmVzcG9uc2VgIHByb3BlcnR5LlxuKi9cbmNsYXNzIFBhcnNlRXJyb3IgZXh0ZW5kcyBjb3JlXzEuUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihlcnJvciwgcmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSByZXNwb25zZS5yZXF1ZXN0O1xuICAgICAgICBzdXBlcihgJHtlcnJvci5tZXNzYWdlfSBpbiBcIiR7b3B0aW9ucy51cmwudG9TdHJpbmcoKX1cImAsIGVycm9yLCByZXNwb25zZS5yZXF1ZXN0KTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1BhcnNlRXJyb3InO1xuICAgICAgICB0aGlzLmNvZGUgPSB0aGlzLmNvZGUgPT09ICdFUlJfR09UX1JFUVVFU1RfRVJST1InID8gJ0VSUl9CT0RZX1BBUlNFX0ZBSUxVUkUnIDogdGhpcy5jb2RlO1xuICAgIH1cbn1cbmV4cG9ydHMuUGFyc2VFcnJvciA9IFBhcnNlRXJyb3I7XG4vKipcbkFuIGVycm9yIHRvIGJlIHRocm93biB3aGVuIHRoZSByZXF1ZXN0IGlzIGFib3J0ZWQgd2l0aCBgLmNhbmNlbCgpYC5cbiovXG5jbGFzcyBDYW5jZWxFcnJvciBleHRlbmRzIGNvcmVfMS5SZXF1ZXN0RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHJlcXVlc3QpIHtcbiAgICAgICAgc3VwZXIoJ1Byb21pc2Ugd2FzIGNhbmNlbGVkJywge30sIHJlcXVlc3QpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQ2FuY2VsRXJyb3InO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0NBTkNFTEVEJztcbiAgICB9XG4gICAgZ2V0IGlzQ2FuY2VsZWQoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2FuY2VsRXJyb3IgPSBDYW5jZWxFcnJvcjtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi4vY29yZVwiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/as-promise/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/calculate-retry-delay.js":
/*!********************************************************************!*\
  !*** ./node_modules/got/dist/source/core/calculate-retry-delay.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.retryAfterStatusCodes = void 0;\nexports.retryAfterStatusCodes = new Set([413, 429, 503]);\nconst calculateRetryDelay = ({ attemptCount, retryOptions, error, retryAfter }) => {\n    if (attemptCount > retryOptions.limit) {\n        return 0;\n    }\n    const hasMethod = retryOptions.methods.includes(error.options.method);\n    const hasErrorCode = retryOptions.errorCodes.includes(error.code);\n    const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);\n    if (!hasMethod || (!hasErrorCode && !hasStatusCode)) {\n        return 0;\n    }\n    if (error.response) {\n        if (retryAfter) {\n            if (retryOptions.maxRetryAfter === undefined || retryAfter > retryOptions.maxRetryAfter) {\n                return 0;\n            }\n            return retryAfter;\n        }\n        if (error.response.statusCode === 413) {\n            return 0;\n        }\n    }\n    const noise = Math.random() * 100;\n    return ((2 ** (attemptCount - 1)) * 1000) + noise;\n};\nexports[\"default\"] = calculateRetryDelay;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvY2FsY3VsYXRlLXJldHJ5LWRlbGF5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFDN0IsK0JBQStCLCtDQUErQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWUiLCJzb3VyY2VzIjpbIkM6XFxIYWNrYXRob25cXEhhY2tzcGlyZVxcbm9kZV9tb2R1bGVzXFxnb3RcXGRpc3RcXHNvdXJjZVxcY29yZVxcY2FsY3VsYXRlLXJldHJ5LWRlbGF5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXRyeUFmdGVyU3RhdHVzQ29kZXMgPSB2b2lkIDA7XG5leHBvcnRzLnJldHJ5QWZ0ZXJTdGF0dXNDb2RlcyA9IG5ldyBTZXQoWzQxMywgNDI5LCA1MDNdKTtcbmNvbnN0IGNhbGN1bGF0ZVJldHJ5RGVsYXkgPSAoeyBhdHRlbXB0Q291bnQsIHJldHJ5T3B0aW9ucywgZXJyb3IsIHJldHJ5QWZ0ZXIgfSkgPT4ge1xuICAgIGlmIChhdHRlbXB0Q291bnQgPiByZXRyeU9wdGlvbnMubGltaXQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGNvbnN0IGhhc01ldGhvZCA9IHJldHJ5T3B0aW9ucy5tZXRob2RzLmluY2x1ZGVzKGVycm9yLm9wdGlvbnMubWV0aG9kKTtcbiAgICBjb25zdCBoYXNFcnJvckNvZGUgPSByZXRyeU9wdGlvbnMuZXJyb3JDb2Rlcy5pbmNsdWRlcyhlcnJvci5jb2RlKTtcbiAgICBjb25zdCBoYXNTdGF0dXNDb2RlID0gZXJyb3IucmVzcG9uc2UgJiYgcmV0cnlPcHRpb25zLnN0YXR1c0NvZGVzLmluY2x1ZGVzKGVycm9yLnJlc3BvbnNlLnN0YXR1c0NvZGUpO1xuICAgIGlmICghaGFzTWV0aG9kIHx8ICghaGFzRXJyb3JDb2RlICYmICFoYXNTdGF0dXNDb2RlKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGVycm9yLnJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXRyeUFmdGVyKSB7XG4gICAgICAgICAgICBpZiAocmV0cnlPcHRpb25zLm1heFJldHJ5QWZ0ZXIgPT09IHVuZGVmaW5lZCB8fCByZXRyeUFmdGVyID4gcmV0cnlPcHRpb25zLm1heFJldHJ5QWZ0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXRyeUFmdGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvci5yZXNwb25zZS5zdGF0dXNDb2RlID09PSA0MTMpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG5vaXNlID0gTWF0aC5yYW5kb20oKSAqIDEwMDtcbiAgICByZXR1cm4gKCgyICoqIChhdHRlbXB0Q291bnQgLSAxKSkgKiAxMDAwKSArIG5vaXNlO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbGN1bGF0ZVJldHJ5RGVsYXk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/calculate-retry-delay.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/index.js":
/*!****************************************************!*\
  !*** ./node_modules/got/dist/source/core/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UnsupportedProtocolError = exports.ReadError = exports.TimeoutError = exports.UploadError = exports.CacheError = exports.HTTPError = exports.MaxRedirectsError = exports.RequestError = exports.setNonEnumerableProperties = exports.knownHookEvents = exports.withoutBody = exports.kIsNormalizedAlready = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst http_1 = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http_timer_1 = __webpack_require__(/*! @szmarczak/http-timer */ \"(rsc)/./node_modules/@szmarczak/http-timer/dist/source/index.js\");\nconst cacheable_lookup_1 = __webpack_require__(/*! cacheable-lookup */ \"(rsc)/./node_modules/cacheable-lookup/source/index.js\");\nconst CacheableRequest = __webpack_require__(/*! cacheable-request */ \"(rsc)/./node_modules/cacheable-request/src/index.js\");\nconst decompressResponse = __webpack_require__(/*! decompress-response */ \"(rsc)/./node_modules/decompress-response/index.js\");\n// @ts-expect-error Missing types\nconst http2wrapper = __webpack_require__(/*! http2-wrapper */ \"(rsc)/./node_modules/http2-wrapper/source/index.js\");\nconst lowercaseKeys = __webpack_require__(/*! lowercase-keys */ \"(rsc)/./node_modules/lowercase-keys/index.js\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst get_body_size_1 = __webpack_require__(/*! ./utils/get-body-size */ \"(rsc)/./node_modules/got/dist/source/core/utils/get-body-size.js\");\nconst is_form_data_1 = __webpack_require__(/*! ./utils/is-form-data */ \"(rsc)/./node_modules/got/dist/source/core/utils/is-form-data.js\");\nconst proxy_events_1 = __webpack_require__(/*! ./utils/proxy-events */ \"(rsc)/./node_modules/got/dist/source/core/utils/proxy-events.js\");\nconst timed_out_1 = __webpack_require__(/*! ./utils/timed-out */ \"(rsc)/./node_modules/got/dist/source/core/utils/timed-out.js\");\nconst url_to_options_1 = __webpack_require__(/*! ./utils/url-to-options */ \"(rsc)/./node_modules/got/dist/source/core/utils/url-to-options.js\");\nconst options_to_url_1 = __webpack_require__(/*! ./utils/options-to-url */ \"(rsc)/./node_modules/got/dist/source/core/utils/options-to-url.js\");\nconst weakable_map_1 = __webpack_require__(/*! ./utils/weakable-map */ \"(rsc)/./node_modules/got/dist/source/core/utils/weakable-map.js\");\nconst get_buffer_1 = __webpack_require__(/*! ./utils/get-buffer */ \"(rsc)/./node_modules/got/dist/source/core/utils/get-buffer.js\");\nconst dns_ip_version_1 = __webpack_require__(/*! ./utils/dns-ip-version */ \"(rsc)/./node_modules/got/dist/source/core/utils/dns-ip-version.js\");\nconst is_response_ok_1 = __webpack_require__(/*! ./utils/is-response-ok */ \"(rsc)/./node_modules/got/dist/source/core/utils/is-response-ok.js\");\nconst deprecation_warning_1 = __webpack_require__(/*! ../utils/deprecation-warning */ \"(rsc)/./node_modules/got/dist/source/utils/deprecation-warning.js\");\nconst normalize_arguments_1 = __webpack_require__(/*! ../as-promise/normalize-arguments */ \"(rsc)/./node_modules/got/dist/source/as-promise/normalize-arguments.js\");\nconst calculate_retry_delay_1 = __webpack_require__(/*! ./calculate-retry-delay */ \"(rsc)/./node_modules/got/dist/source/core/calculate-retry-delay.js\");\nlet globalDnsCache;\nconst kRequest = Symbol('request');\nconst kResponse = Symbol('response');\nconst kResponseSize = Symbol('responseSize');\nconst kDownloadedSize = Symbol('downloadedSize');\nconst kBodySize = Symbol('bodySize');\nconst kUploadedSize = Symbol('uploadedSize');\nconst kServerResponsesPiped = Symbol('serverResponsesPiped');\nconst kUnproxyEvents = Symbol('unproxyEvents');\nconst kIsFromCache = Symbol('isFromCache');\nconst kCancelTimeouts = Symbol('cancelTimeouts');\nconst kStartedReading = Symbol('startedReading');\nconst kStopReading = Symbol('stopReading');\nconst kTriggerRead = Symbol('triggerRead');\nconst kBody = Symbol('body');\nconst kJobs = Symbol('jobs');\nconst kOriginalResponse = Symbol('originalResponse');\nconst kRetryTimeout = Symbol('retryTimeout');\nexports.kIsNormalizedAlready = Symbol('isNormalizedAlready');\nconst supportsBrotli = is_1.default.string(process.versions.brotli);\nexports.withoutBody = new Set(['GET', 'HEAD']);\nexports.knownHookEvents = [\n    'init',\n    'beforeRequest',\n    'beforeRedirect',\n    'beforeError',\n    'beforeRetry',\n    // Promise-Only\n    'afterResponse'\n];\nfunction validateSearchParameters(searchParameters) {\n    // eslint-disable-next-line guard-for-in\n    for (const key in searchParameters) {\n        const value = searchParameters[key];\n        if (!is_1.default.string(value) && !is_1.default.number(value) && !is_1.default.boolean(value) && !is_1.default.null_(value) && !is_1.default.undefined(value)) {\n            throw new TypeError(`The \\`searchParams\\` value '${String(value)}' must be a string, number, boolean or null`);\n        }\n    }\n}\nfunction isClientRequest(clientRequest) {\n    return is_1.default.object(clientRequest) && !('statusCode' in clientRequest);\n}\nconst cacheableStore = new weakable_map_1.default();\nconst waitForOpenFile = async (file) => new Promise((resolve, reject) => {\n    const onError = (error) => {\n        reject(error);\n    };\n    // Node.js 12 has incomplete types\n    if (!file.pending) {\n        resolve();\n    }\n    file.once('error', onError);\n    file.once('ready', () => {\n        file.off('error', onError);\n        resolve();\n    });\n});\nconst redirectCodes = new Set([300, 301, 302, 303, 304, 307, 308]);\nconst nonEnumerableProperties = [\n    'context',\n    'body',\n    'json',\n    'form'\n];\nexports.setNonEnumerableProperties = (sources, to) => {\n    // Non enumerable properties shall not be merged\n    const properties = {};\n    for (const source of sources) {\n        if (!source) {\n            continue;\n        }\n        for (const name of nonEnumerableProperties) {\n            if (!(name in source)) {\n                continue;\n            }\n            properties[name] = {\n                writable: true,\n                configurable: true,\n                enumerable: false,\n                // @ts-expect-error TS doesn't see the check above\n                value: source[name]\n            };\n        }\n    }\n    Object.defineProperties(to, properties);\n};\n/**\nAn error to be thrown when a request fails.\nContains a `code` property with error class code, like `ECONNREFUSED`.\n*/\nclass RequestError extends Error {\n    constructor(message, error, self) {\n        var _a, _b;\n        super(message);\n        Error.captureStackTrace(this, this.constructor);\n        this.name = 'RequestError';\n        this.code = (_a = error.code) !== null && _a !== void 0 ? _a : 'ERR_GOT_REQUEST_ERROR';\n        if (self instanceof Request) {\n            Object.defineProperty(this, 'request', {\n                enumerable: false,\n                value: self\n            });\n            Object.defineProperty(this, 'response', {\n                enumerable: false,\n                value: self[kResponse]\n            });\n            Object.defineProperty(this, 'options', {\n                // This fails because of TS 3.7.2 useDefineForClassFields\n                // Ref: https://github.com/microsoft/TypeScript/issues/34972\n                enumerable: false,\n                value: self.options\n            });\n        }\n        else {\n            Object.defineProperty(this, 'options', {\n                // This fails because of TS 3.7.2 useDefineForClassFields\n                // Ref: https://github.com/microsoft/TypeScript/issues/34972\n                enumerable: false,\n                value: self\n            });\n        }\n        this.timings = (_b = this.request) === null || _b === void 0 ? void 0 : _b.timings;\n        // Recover the original stacktrace\n        if (is_1.default.string(error.stack) && is_1.default.string(this.stack)) {\n            const indexOfMessage = this.stack.indexOf(this.message) + this.message.length;\n            const thisStackTrace = this.stack.slice(indexOfMessage).split('\\n').reverse();\n            const errorStackTrace = error.stack.slice(error.stack.indexOf(error.message) + error.message.length).split('\\n').reverse();\n            // Remove duplicated traces\n            while (errorStackTrace.length !== 0 && errorStackTrace[0] === thisStackTrace[0]) {\n                thisStackTrace.shift();\n            }\n            this.stack = `${this.stack.slice(0, indexOfMessage)}${thisStackTrace.reverse().join('\\n')}${errorStackTrace.reverse().join('\\n')}`;\n        }\n    }\n}\nexports.RequestError = RequestError;\n/**\nAn error to be thrown when the server redirects you more than ten times.\nIncludes a `response` property.\n*/\nclass MaxRedirectsError extends RequestError {\n    constructor(request) {\n        super(`Redirected ${request.options.maxRedirects} times. Aborting.`, {}, request);\n        this.name = 'MaxRedirectsError';\n        this.code = 'ERR_TOO_MANY_REDIRECTS';\n    }\n}\nexports.MaxRedirectsError = MaxRedirectsError;\n/**\nAn error to be thrown when the server response code is not 2xx nor 3xx if `options.followRedirect` is `true`, but always except for 304.\nIncludes a `response` property.\n*/\nclass HTTPError extends RequestError {\n    constructor(response) {\n        super(`Response code ${response.statusCode} (${response.statusMessage})`, {}, response.request);\n        this.name = 'HTTPError';\n        this.code = 'ERR_NON_2XX_3XX_RESPONSE';\n    }\n}\nexports.HTTPError = HTTPError;\n/**\nAn error to be thrown when a cache method fails.\nFor example, if the database goes down or there's a filesystem error.\n*/\nclass CacheError extends RequestError {\n    constructor(error, request) {\n        super(error.message, error, request);\n        this.name = 'CacheError';\n        this.code = this.code === 'ERR_GOT_REQUEST_ERROR' ? 'ERR_CACHE_ACCESS' : this.code;\n    }\n}\nexports.CacheError = CacheError;\n/**\nAn error to be thrown when the request body is a stream and an error occurs while reading from that stream.\n*/\nclass UploadError extends RequestError {\n    constructor(error, request) {\n        super(error.message, error, request);\n        this.name = 'UploadError';\n        this.code = this.code === 'ERR_GOT_REQUEST_ERROR' ? 'ERR_UPLOAD' : this.code;\n    }\n}\nexports.UploadError = UploadError;\n/**\nAn error to be thrown when the request is aborted due to a timeout.\nIncludes an `event` and `timings` property.\n*/\nclass TimeoutError extends RequestError {\n    constructor(error, timings, request) {\n        super(error.message, error, request);\n        this.name = 'TimeoutError';\n        this.event = error.event;\n        this.timings = timings;\n    }\n}\nexports.TimeoutError = TimeoutError;\n/**\nAn error to be thrown when reading from response stream fails.\n*/\nclass ReadError extends RequestError {\n    constructor(error, request) {\n        super(error.message, error, request);\n        this.name = 'ReadError';\n        this.code = this.code === 'ERR_GOT_REQUEST_ERROR' ? 'ERR_READING_RESPONSE_STREAM' : this.code;\n    }\n}\nexports.ReadError = ReadError;\n/**\nAn error to be thrown when given an unsupported protocol.\n*/\nclass UnsupportedProtocolError extends RequestError {\n    constructor(options) {\n        super(`Unsupported protocol \"${options.url.protocol}\"`, {}, options);\n        this.name = 'UnsupportedProtocolError';\n        this.code = 'ERR_UNSUPPORTED_PROTOCOL';\n    }\n}\nexports.UnsupportedProtocolError = UnsupportedProtocolError;\nconst proxiedRequestEvents = [\n    'socket',\n    'connect',\n    'continue',\n    'information',\n    'upgrade',\n    'timeout'\n];\nclass Request extends stream_1.Duplex {\n    constructor(url, options = {}, defaults) {\n        super({\n            // This must be false, to enable throwing after destroy\n            // It is used for retry logic in Promise API\n            autoDestroy: false,\n            // It needs to be zero because we're just proxying the data to another stream\n            highWaterMark: 0\n        });\n        this[kDownloadedSize] = 0;\n        this[kUploadedSize] = 0;\n        this.requestInitialized = false;\n        this[kServerResponsesPiped] = new Set();\n        this.redirects = [];\n        this[kStopReading] = false;\n        this[kTriggerRead] = false;\n        this[kJobs] = [];\n        this.retryCount = 0;\n        // TODO: Remove this when targeting Node.js >= 12\n        this._progressCallbacks = [];\n        const unlockWrite = () => this._unlockWrite();\n        const lockWrite = () => this._lockWrite();\n        this.on('pipe', (source) => {\n            source.prependListener('data', unlockWrite);\n            source.on('data', lockWrite);\n            source.prependListener('end', unlockWrite);\n            source.on('end', lockWrite);\n        });\n        this.on('unpipe', (source) => {\n            source.off('data', unlockWrite);\n            source.off('data', lockWrite);\n            source.off('end', unlockWrite);\n            source.off('end', lockWrite);\n        });\n        this.on('pipe', source => {\n            if (source instanceof http_1.IncomingMessage) {\n                this.options.headers = {\n                    ...source.headers,\n                    ...this.options.headers\n                };\n            }\n        });\n        const { json, body, form } = options;\n        if (json || body || form) {\n            this._lockWrite();\n        }\n        if (exports.kIsNormalizedAlready in options) {\n            this.options = options;\n        }\n        else {\n            try {\n                // @ts-expect-error Common TypeScript bug saying that `this.constructor` is not accessible\n                this.options = this.constructor.normalizeArguments(url, options, defaults);\n            }\n            catch (error) {\n                // TODO: Move this to `_destroy()`\n                if (is_1.default.nodeStream(options.body)) {\n                    options.body.destroy();\n                }\n                this.destroy(error);\n                return;\n            }\n        }\n        (async () => {\n            var _a;\n            try {\n                if (this.options.body instanceof fs_1.ReadStream) {\n                    await waitForOpenFile(this.options.body);\n                }\n                const { url: normalizedURL } = this.options;\n                if (!normalizedURL) {\n                    throw new TypeError('Missing `url` property');\n                }\n                this.requestUrl = normalizedURL.toString();\n                decodeURI(this.requestUrl);\n                await this._finalizeBody();\n                await this._makeRequest();\n                if (this.destroyed) {\n                    (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.destroy();\n                    return;\n                }\n                // Queued writes etc.\n                for (const job of this[kJobs]) {\n                    job();\n                }\n                // Prevent memory leak\n                this[kJobs].length = 0;\n                this.requestInitialized = true;\n            }\n            catch (error) {\n                if (error instanceof RequestError) {\n                    this._beforeError(error);\n                    return;\n                }\n                // This is a workaround for https://github.com/nodejs/node/issues/33335\n                if (!this.destroyed) {\n                    this.destroy(error);\n                }\n            }\n        })();\n    }\n    static normalizeArguments(url, options, defaults) {\n        var _a, _b, _c, _d, _e;\n        const rawOptions = options;\n        if (is_1.default.object(url) && !is_1.default.urlInstance(url)) {\n            options = { ...defaults, ...url, ...options };\n        }\n        else {\n            if (url && options && options.url !== undefined) {\n                throw new TypeError('The `url` option is mutually exclusive with the `input` argument');\n            }\n            options = { ...defaults, ...options };\n            if (url !== undefined) {\n                options.url = url;\n            }\n            if (is_1.default.urlInstance(options.url)) {\n                options.url = new url_1.URL(options.url.toString());\n            }\n        }\n        // TODO: Deprecate URL options in Got 12.\n        // Support extend-specific options\n        if (options.cache === false) {\n            options.cache = undefined;\n        }\n        if (options.dnsCache === false) {\n            options.dnsCache = undefined;\n        }\n        // Nice type assertions\n        is_1.assert.any([is_1.default.string, is_1.default.undefined], options.method);\n        is_1.assert.any([is_1.default.object, is_1.default.undefined], options.headers);\n        is_1.assert.any([is_1.default.string, is_1.default.urlInstance, is_1.default.undefined], options.prefixUrl);\n        is_1.assert.any([is_1.default.object, is_1.default.undefined], options.cookieJar);\n        is_1.assert.any([is_1.default.object, is_1.default.string, is_1.default.undefined], options.searchParams);\n        is_1.assert.any([is_1.default.object, is_1.default.string, is_1.default.undefined], options.cache);\n        is_1.assert.any([is_1.default.object, is_1.default.number, is_1.default.undefined], options.timeout);\n        is_1.assert.any([is_1.default.object, is_1.default.undefined], options.context);\n        is_1.assert.any([is_1.default.object, is_1.default.undefined], options.hooks);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.decompress);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.ignoreInvalidCookies);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.followRedirect);\n        is_1.assert.any([is_1.default.number, is_1.default.undefined], options.maxRedirects);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.throwHttpErrors);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.http2);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.allowGetBody);\n        is_1.assert.any([is_1.default.string, is_1.default.undefined], options.localAddress);\n        is_1.assert.any([dns_ip_version_1.isDnsLookupIpVersion, is_1.default.undefined], options.dnsLookupIpVersion);\n        is_1.assert.any([is_1.default.object, is_1.default.undefined], options.https);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.rejectUnauthorized);\n        if (options.https) {\n            is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.https.rejectUnauthorized);\n            is_1.assert.any([is_1.default.function_, is_1.default.undefined], options.https.checkServerIdentity);\n            is_1.assert.any([is_1.default.string, is_1.default.object, is_1.default.array, is_1.default.undefined], options.https.certificateAuthority);\n            is_1.assert.any([is_1.default.string, is_1.default.object, is_1.default.array, is_1.default.undefined], options.https.key);\n            is_1.assert.any([is_1.default.string, is_1.default.object, is_1.default.array, is_1.default.undefined], options.https.certificate);\n            is_1.assert.any([is_1.default.string, is_1.default.undefined], options.https.passphrase);\n            is_1.assert.any([is_1.default.string, is_1.default.buffer, is_1.default.array, is_1.default.undefined], options.https.pfx);\n        }\n        is_1.assert.any([is_1.default.object, is_1.default.undefined], options.cacheOptions);\n        // `options.method`\n        if (is_1.default.string(options.method)) {\n            options.method = options.method.toUpperCase();\n        }\n        else {\n            options.method = 'GET';\n        }\n        // `options.headers`\n        if (options.headers === (defaults === null || defaults === void 0 ? void 0 : defaults.headers)) {\n            options.headers = { ...options.headers };\n        }\n        else {\n            options.headers = lowercaseKeys({ ...(defaults === null || defaults === void 0 ? void 0 : defaults.headers), ...options.headers });\n        }\n        // Disallow legacy `url.Url`\n        if ('slashes' in options) {\n            throw new TypeError('The legacy `url.Url` has been deprecated. Use `URL` instead.');\n        }\n        // `options.auth`\n        if ('auth' in options) {\n            throw new TypeError('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n        }\n        // `options.searchParams`\n        if ('searchParams' in options) {\n            if (options.searchParams && options.searchParams !== (defaults === null || defaults === void 0 ? void 0 : defaults.searchParams)) {\n                let searchParameters;\n                if (is_1.default.string(options.searchParams) || (options.searchParams instanceof url_1.URLSearchParams)) {\n                    searchParameters = new url_1.URLSearchParams(options.searchParams);\n                }\n                else {\n                    validateSearchParameters(options.searchParams);\n                    searchParameters = new url_1.URLSearchParams();\n                    // eslint-disable-next-line guard-for-in\n                    for (const key in options.searchParams) {\n                        const value = options.searchParams[key];\n                        if (value === null) {\n                            searchParameters.append(key, '');\n                        }\n                        else if (value !== undefined) {\n                            searchParameters.append(key, value);\n                        }\n                    }\n                }\n                // `normalizeArguments()` is also used to merge options\n                (_a = defaults === null || defaults === void 0 ? void 0 : defaults.searchParams) === null || _a === void 0 ? void 0 : _a.forEach((value, key) => {\n                    // Only use default if one isn't already defined\n                    if (!searchParameters.has(key)) {\n                        searchParameters.append(key, value);\n                    }\n                });\n                options.searchParams = searchParameters;\n            }\n        }\n        // `options.username` & `options.password`\n        options.username = (_b = options.username) !== null && _b !== void 0 ? _b : '';\n        options.password = (_c = options.password) !== null && _c !== void 0 ? _c : '';\n        // `options.prefixUrl` & `options.url`\n        if (is_1.default.undefined(options.prefixUrl)) {\n            options.prefixUrl = (_d = defaults === null || defaults === void 0 ? void 0 : defaults.prefixUrl) !== null && _d !== void 0 ? _d : '';\n        }\n        else {\n            options.prefixUrl = options.prefixUrl.toString();\n            if (options.prefixUrl !== '' && !options.prefixUrl.endsWith('/')) {\n                options.prefixUrl += '/';\n            }\n        }\n        if (is_1.default.string(options.url)) {\n            if (options.url.startsWith('/')) {\n                throw new Error('`input` must not start with a slash when using `prefixUrl`');\n            }\n            options.url = options_to_url_1.default(options.prefixUrl + options.url, options);\n        }\n        else if ((is_1.default.undefined(options.url) && options.prefixUrl !== '') || options.protocol) {\n            options.url = options_to_url_1.default(options.prefixUrl, options);\n        }\n        if (options.url) {\n            if ('port' in options) {\n                delete options.port;\n            }\n            // Make it possible to change `options.prefixUrl`\n            let { prefixUrl } = options;\n            Object.defineProperty(options, 'prefixUrl', {\n                set: (value) => {\n                    const url = options.url;\n                    if (!url.href.startsWith(value)) {\n                        throw new Error(`Cannot change \\`prefixUrl\\` from ${prefixUrl} to ${value}: ${url.href}`);\n                    }\n                    options.url = new url_1.URL(value + url.href.slice(prefixUrl.length));\n                    prefixUrl = value;\n                },\n                get: () => prefixUrl\n            });\n            // Support UNIX sockets\n            let { protocol } = options.url;\n            if (protocol === 'unix:') {\n                protocol = 'http:';\n                options.url = new url_1.URL(`http://unix${options.url.pathname}${options.url.search}`);\n            }\n            // Set search params\n            if (options.searchParams) {\n                // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                options.url.search = options.searchParams.toString();\n            }\n            // Protocol check\n            if (protocol !== 'http:' && protocol !== 'https:') {\n                throw new UnsupportedProtocolError(options);\n            }\n            // Update `username`\n            if (options.username === '') {\n                options.username = options.url.username;\n            }\n            else {\n                options.url.username = options.username;\n            }\n            // Update `password`\n            if (options.password === '') {\n                options.password = options.url.password;\n            }\n            else {\n                options.url.password = options.password;\n            }\n        }\n        // `options.cookieJar`\n        const { cookieJar } = options;\n        if (cookieJar) {\n            let { setCookie, getCookieString } = cookieJar;\n            is_1.assert.function_(setCookie);\n            is_1.assert.function_(getCookieString);\n            /* istanbul ignore next: Horrible `tough-cookie` v3 check */\n            if (setCookie.length === 4 && getCookieString.length === 0) {\n                setCookie = util_1.promisify(setCookie.bind(options.cookieJar));\n                getCookieString = util_1.promisify(getCookieString.bind(options.cookieJar));\n                options.cookieJar = {\n                    setCookie,\n                    getCookieString: getCookieString\n                };\n            }\n        }\n        // `options.cache`\n        const { cache } = options;\n        if (cache) {\n            if (!cacheableStore.has(cache)) {\n                cacheableStore.set(cache, new CacheableRequest(((requestOptions, handler) => {\n                    const result = requestOptions[kRequest](requestOptions, handler);\n                    // TODO: remove this when `cacheable-request` supports async request functions.\n                    if (is_1.default.promise(result)) {\n                        // @ts-expect-error\n                        // We only need to implement the error handler in order to support HTTP2 caching.\n                        // The result will be a promise anyway.\n                        result.once = (event, handler) => {\n                            if (event === 'error') {\n                                result.catch(handler);\n                            }\n                            else if (event === 'abort') {\n                                // The empty catch is needed here in case when\n                                // it rejects before it's `await`ed in `_makeRequest`.\n                                (async () => {\n                                    try {\n                                        const request = (await result);\n                                        request.once('abort', handler);\n                                    }\n                                    catch (_a) { }\n                                })();\n                            }\n                            else {\n                                /* istanbul ignore next: safety check */\n                                throw new Error(`Unknown HTTP2 promise event: ${event}`);\n                            }\n                            return result;\n                        };\n                    }\n                    return result;\n                }), cache));\n            }\n        }\n        // `options.cacheOptions`\n        options.cacheOptions = { ...options.cacheOptions };\n        // `options.dnsCache`\n        if (options.dnsCache === true) {\n            if (!globalDnsCache) {\n                globalDnsCache = new cacheable_lookup_1.default();\n            }\n            options.dnsCache = globalDnsCache;\n        }\n        else if (!is_1.default.undefined(options.dnsCache) && !options.dnsCache.lookup) {\n            throw new TypeError(`Parameter \\`dnsCache\\` must be a CacheableLookup instance or a boolean, got ${is_1.default(options.dnsCache)}`);\n        }\n        // `options.timeout`\n        if (is_1.default.number(options.timeout)) {\n            options.timeout = { request: options.timeout };\n        }\n        else if (defaults && options.timeout !== defaults.timeout) {\n            options.timeout = {\n                ...defaults.timeout,\n                ...options.timeout\n            };\n        }\n        else {\n            options.timeout = { ...options.timeout };\n        }\n        // `options.context`\n        if (!options.context) {\n            options.context = {};\n        }\n        // `options.hooks`\n        const areHooksDefault = options.hooks === (defaults === null || defaults === void 0 ? void 0 : defaults.hooks);\n        options.hooks = { ...options.hooks };\n        for (const event of exports.knownHookEvents) {\n            if (event in options.hooks) {\n                if (is_1.default.array(options.hooks[event])) {\n                    // See https://github.com/microsoft/TypeScript/issues/31445#issuecomment-576929044\n                    options.hooks[event] = [...options.hooks[event]];\n                }\n                else {\n                    throw new TypeError(`Parameter \\`${event}\\` must be an Array, got ${is_1.default(options.hooks[event])}`);\n                }\n            }\n            else {\n                options.hooks[event] = [];\n            }\n        }\n        if (defaults && !areHooksDefault) {\n            for (const event of exports.knownHookEvents) {\n                const defaultHooks = defaults.hooks[event];\n                if (defaultHooks.length > 0) {\n                    // See https://github.com/microsoft/TypeScript/issues/31445#issuecomment-576929044\n                    options.hooks[event] = [\n                        ...defaults.hooks[event],\n                        ...options.hooks[event]\n                    ];\n                }\n            }\n        }\n        // DNS options\n        if ('family' in options) {\n            deprecation_warning_1.default('\"options.family\" was never documented, please use \"options.dnsLookupIpVersion\"');\n        }\n        // HTTPS options\n        if (defaults === null || defaults === void 0 ? void 0 : defaults.https) {\n            options.https = { ...defaults.https, ...options.https };\n        }\n        if ('rejectUnauthorized' in options) {\n            deprecation_warning_1.default('\"options.rejectUnauthorized\" is now deprecated, please use \"options.https.rejectUnauthorized\"');\n        }\n        if ('checkServerIdentity' in options) {\n            deprecation_warning_1.default('\"options.checkServerIdentity\" was never documented, please use \"options.https.checkServerIdentity\"');\n        }\n        if ('ca' in options) {\n            deprecation_warning_1.default('\"options.ca\" was never documented, please use \"options.https.certificateAuthority\"');\n        }\n        if ('key' in options) {\n            deprecation_warning_1.default('\"options.key\" was never documented, please use \"options.https.key\"');\n        }\n        if ('cert' in options) {\n            deprecation_warning_1.default('\"options.cert\" was never documented, please use \"options.https.certificate\"');\n        }\n        if ('passphrase' in options) {\n            deprecation_warning_1.default('\"options.passphrase\" was never documented, please use \"options.https.passphrase\"');\n        }\n        if ('pfx' in options) {\n            deprecation_warning_1.default('\"options.pfx\" was never documented, please use \"options.https.pfx\"');\n        }\n        // Other options\n        if ('followRedirects' in options) {\n            throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n        }\n        if (options.agent) {\n            for (const key in options.agent) {\n                if (key !== 'http' && key !== 'https' && key !== 'http2') {\n                    throw new TypeError(`Expected the \\`options.agent\\` properties to be \\`http\\`, \\`https\\` or \\`http2\\`, got \\`${key}\\``);\n                }\n            }\n        }\n        options.maxRedirects = (_e = options.maxRedirects) !== null && _e !== void 0 ? _e : 0;\n        // Set non-enumerable properties\n        exports.setNonEnumerableProperties([defaults, rawOptions], options);\n        return normalize_arguments_1.default(options, defaults);\n    }\n    _lockWrite() {\n        const onLockedWrite = () => {\n            throw new TypeError('The payload has been already provided');\n        };\n        this.write = onLockedWrite;\n        this.end = onLockedWrite;\n    }\n    _unlockWrite() {\n        this.write = super.write;\n        this.end = super.end;\n    }\n    async _finalizeBody() {\n        const { options } = this;\n        const { headers } = options;\n        const isForm = !is_1.default.undefined(options.form);\n        const isJSON = !is_1.default.undefined(options.json);\n        const isBody = !is_1.default.undefined(options.body);\n        const hasPayload = isForm || isJSON || isBody;\n        const cannotHaveBody = exports.withoutBody.has(options.method) && !(options.method === 'GET' && options.allowGetBody);\n        this._cannotHaveBody = cannotHaveBody;\n        if (hasPayload) {\n            if (cannotHaveBody) {\n                throw new TypeError(`The \\`${options.method}\\` method cannot be used with a body`);\n            }\n            if ([isBody, isForm, isJSON].filter(isTrue => isTrue).length > 1) {\n                throw new TypeError('The `body`, `json` and `form` options are mutually exclusive');\n            }\n            if (isBody &&\n                !(options.body instanceof stream_1.Readable) &&\n                !is_1.default.string(options.body) &&\n                !is_1.default.buffer(options.body) &&\n                !is_form_data_1.default(options.body)) {\n                throw new TypeError('The `body` option must be a stream.Readable, string or Buffer');\n            }\n            if (isForm && !is_1.default.object(options.form)) {\n                throw new TypeError('The `form` option must be an Object');\n            }\n            {\n                // Serialize body\n                const noContentType = !is_1.default.string(headers['content-type']);\n                if (isBody) {\n                    // Special case for https://github.com/form-data/form-data\n                    if (is_form_data_1.default(options.body) && noContentType) {\n                        headers['content-type'] = `multipart/form-data; boundary=${options.body.getBoundary()}`;\n                    }\n                    this[kBody] = options.body;\n                }\n                else if (isForm) {\n                    if (noContentType) {\n                        headers['content-type'] = 'application/x-www-form-urlencoded';\n                    }\n                    this[kBody] = (new url_1.URLSearchParams(options.form)).toString();\n                }\n                else {\n                    if (noContentType) {\n                        headers['content-type'] = 'application/json';\n                    }\n                    this[kBody] = options.stringifyJson(options.json);\n                }\n                const uploadBodySize = await get_body_size_1.default(this[kBody], options.headers);\n                // See https://tools.ietf.org/html/rfc7230#section-3.3.2\n                // A user agent SHOULD send a Content-Length in a request message when\n                // no Transfer-Encoding is sent and the request method defines a meaning\n                // for an enclosed payload body.  For example, a Content-Length header\n                // field is normally sent in a POST request even when the value is 0\n                // (indicating an empty payload body).  A user agent SHOULD NOT send a\n                // Content-Length header field when the request message does not contain\n                // a payload body and the method semantics do not anticipate such a\n                // body.\n                if (is_1.default.undefined(headers['content-length']) && is_1.default.undefined(headers['transfer-encoding'])) {\n                    if (!cannotHaveBody && !is_1.default.undefined(uploadBodySize)) {\n                        headers['content-length'] = String(uploadBodySize);\n                    }\n                }\n            }\n        }\n        else if (cannotHaveBody) {\n            this._lockWrite();\n        }\n        else {\n            this._unlockWrite();\n        }\n        this[kBodySize] = Number(headers['content-length']) || undefined;\n    }\n    async _onResponseBase(response) {\n        const { options } = this;\n        const { url } = options;\n        this[kOriginalResponse] = response;\n        if (options.decompress) {\n            response = decompressResponse(response);\n        }\n        const statusCode = response.statusCode;\n        const typedResponse = response;\n        typedResponse.statusMessage = typedResponse.statusMessage ? typedResponse.statusMessage : http.STATUS_CODES[statusCode];\n        typedResponse.url = options.url.toString();\n        typedResponse.requestUrl = this.requestUrl;\n        typedResponse.redirectUrls = this.redirects;\n        typedResponse.request = this;\n        typedResponse.isFromCache = response.fromCache || false;\n        typedResponse.ip = this.ip;\n        typedResponse.retryCount = this.retryCount;\n        this[kIsFromCache] = typedResponse.isFromCache;\n        this[kResponseSize] = Number(response.headers['content-length']) || undefined;\n        this[kResponse] = response;\n        response.once('end', () => {\n            this[kResponseSize] = this[kDownloadedSize];\n            this.emit('downloadProgress', this.downloadProgress);\n        });\n        response.once('error', (error) => {\n            // Force clean-up, because some packages don't do this.\n            // TODO: Fix decompress-response\n            response.destroy();\n            this._beforeError(new ReadError(error, this));\n        });\n        response.once('aborted', () => {\n            this._beforeError(new ReadError({\n                name: 'Error',\n                message: 'The server aborted pending request',\n                code: 'ECONNRESET'\n            }, this));\n        });\n        this.emit('downloadProgress', this.downloadProgress);\n        const rawCookies = response.headers['set-cookie'];\n        if (is_1.default.object(options.cookieJar) && rawCookies) {\n            let promises = rawCookies.map(async (rawCookie) => options.cookieJar.setCookie(rawCookie, url.toString()));\n            if (options.ignoreInvalidCookies) {\n                promises = promises.map(async (p) => p.catch(() => { }));\n            }\n            try {\n                await Promise.all(promises);\n            }\n            catch (error) {\n                this._beforeError(error);\n                return;\n            }\n        }\n        if (options.followRedirect && response.headers.location && redirectCodes.has(statusCode)) {\n            // We're being redirected, we don't care about the response.\n            // It'd be best to abort the request, but we can't because\n            // we would have to sacrifice the TCP connection. We don't want that.\n            response.resume();\n            if (this[kRequest]) {\n                this[kCancelTimeouts]();\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete this[kRequest];\n                this[kUnproxyEvents]();\n            }\n            const shouldBeGet = statusCode === 303 && options.method !== 'GET' && options.method !== 'HEAD';\n            if (shouldBeGet || !options.methodRewriting) {\n                // Server responded with \"see other\", indicating that the resource exists at another location,\n                // and the client should request it from that location via GET or HEAD.\n                options.method = 'GET';\n                if ('body' in options) {\n                    delete options.body;\n                }\n                if ('json' in options) {\n                    delete options.json;\n                }\n                if ('form' in options) {\n                    delete options.form;\n                }\n                this[kBody] = undefined;\n                delete options.headers['content-length'];\n            }\n            if (this.redirects.length >= options.maxRedirects) {\n                this._beforeError(new MaxRedirectsError(this));\n                return;\n            }\n            try {\n                // Do not remove. See https://github.com/sindresorhus/got/pull/214\n                const redirectBuffer = Buffer.from(response.headers.location, 'binary').toString();\n                // Handles invalid URLs. See https://github.com/sindresorhus/got/issues/604\n                const redirectUrl = new url_1.URL(redirectBuffer, url);\n                const redirectString = redirectUrl.toString();\n                decodeURI(redirectString);\n                // eslint-disable-next-line no-inner-declarations\n                function isUnixSocketURL(url) {\n                    return url.protocol === 'unix:' || url.hostname === 'unix';\n                }\n                if (!isUnixSocketURL(url) && isUnixSocketURL(redirectUrl)) {\n                    this._beforeError(new RequestError('Cannot redirect to UNIX socket', {}, this));\n                    return;\n                }\n                // Redirecting to a different site, clear sensitive data.\n                if (redirectUrl.hostname !== url.hostname || redirectUrl.port !== url.port) {\n                    if ('host' in options.headers) {\n                        delete options.headers.host;\n                    }\n                    if ('cookie' in options.headers) {\n                        delete options.headers.cookie;\n                    }\n                    if ('authorization' in options.headers) {\n                        delete options.headers.authorization;\n                    }\n                    if (options.username || options.password) {\n                        options.username = '';\n                        options.password = '';\n                    }\n                }\n                else {\n                    redirectUrl.username = options.username;\n                    redirectUrl.password = options.password;\n                }\n                this.redirects.push(redirectString);\n                options.url = redirectUrl;\n                for (const hook of options.hooks.beforeRedirect) {\n                    // eslint-disable-next-line no-await-in-loop\n                    await hook(options, typedResponse);\n                }\n                this.emit('redirect', typedResponse, options);\n                await this._makeRequest();\n            }\n            catch (error) {\n                this._beforeError(error);\n                return;\n            }\n            return;\n        }\n        if (options.isStream && options.throwHttpErrors && !is_response_ok_1.isResponseOk(typedResponse)) {\n            this._beforeError(new HTTPError(typedResponse));\n            return;\n        }\n        response.on('readable', () => {\n            if (this[kTriggerRead]) {\n                this._read();\n            }\n        });\n        this.on('resume', () => {\n            response.resume();\n        });\n        this.on('pause', () => {\n            response.pause();\n        });\n        response.once('end', () => {\n            this.push(null);\n        });\n        this.emit('response', response);\n        for (const destination of this[kServerResponsesPiped]) {\n            if (destination.headersSent) {\n                continue;\n            }\n            // eslint-disable-next-line guard-for-in\n            for (const key in response.headers) {\n                const isAllowed = options.decompress ? key !== 'content-encoding' : true;\n                const value = response.headers[key];\n                if (isAllowed) {\n                    destination.setHeader(key, value);\n                }\n            }\n            destination.statusCode = statusCode;\n        }\n    }\n    async _onResponse(response) {\n        try {\n            await this._onResponseBase(response);\n        }\n        catch (error) {\n            /* istanbul ignore next: better safe than sorry */\n            this._beforeError(error);\n        }\n    }\n    _onRequest(request) {\n        const { options } = this;\n        const { timeout, url } = options;\n        http_timer_1.default(request);\n        this[kCancelTimeouts] = timed_out_1.default(request, timeout, url);\n        const responseEventName = options.cache ? 'cacheableResponse' : 'response';\n        request.once(responseEventName, (response) => {\n            void this._onResponse(response);\n        });\n        request.once('error', (error) => {\n            var _a;\n            // Force clean-up, because some packages (e.g. nock) don't do this.\n            request.destroy();\n            // Node.js <= 12.18.2 mistakenly emits the response `end` first.\n            (_a = request.res) === null || _a === void 0 ? void 0 : _a.removeAllListeners('end');\n            error = error instanceof timed_out_1.TimeoutError ? new TimeoutError(error, this.timings, this) : new RequestError(error.message, error, this);\n            this._beforeError(error);\n        });\n        this[kUnproxyEvents] = proxy_events_1.default(request, this, proxiedRequestEvents);\n        this[kRequest] = request;\n        this.emit('uploadProgress', this.uploadProgress);\n        // Send body\n        const body = this[kBody];\n        const currentRequest = this.redirects.length === 0 ? this : request;\n        if (is_1.default.nodeStream(body)) {\n            body.pipe(currentRequest);\n            body.once('error', (error) => {\n                this._beforeError(new UploadError(error, this));\n            });\n        }\n        else {\n            this._unlockWrite();\n            if (!is_1.default.undefined(body)) {\n                this._writeRequest(body, undefined, () => { });\n                currentRequest.end();\n                this._lockWrite();\n            }\n            else if (this._cannotHaveBody || this._noPipe) {\n                currentRequest.end();\n                this._lockWrite();\n            }\n        }\n        this.emit('request', request);\n    }\n    async _createCacheableRequest(url, options) {\n        return new Promise((resolve, reject) => {\n            // TODO: Remove `utils/url-to-options.ts` when `cacheable-request` is fixed\n            Object.assign(options, url_to_options_1.default(url));\n            // `http-cache-semantics` checks this\n            // TODO: Fix this ignore.\n            // @ts-expect-error\n            delete options.url;\n            let request;\n            // This is ugly\n            const cacheRequest = cacheableStore.get(options.cache)(options, async (response) => {\n                // TODO: Fix `cacheable-response`\n                response._readableState.autoDestroy = false;\n                if (request) {\n                    (await request).emit('cacheableResponse', response);\n                }\n                resolve(response);\n            });\n            // Restore options\n            options.url = url;\n            cacheRequest.once('error', reject);\n            cacheRequest.once('request', async (requestOrPromise) => {\n                request = requestOrPromise;\n                resolve(request);\n            });\n        });\n    }\n    async _makeRequest() {\n        var _a, _b, _c, _d, _e;\n        const { options } = this;\n        const { headers } = options;\n        for (const key in headers) {\n            if (is_1.default.undefined(headers[key])) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete headers[key];\n            }\n            else if (is_1.default.null_(headers[key])) {\n                throw new TypeError(`Use \\`undefined\\` instead of \\`null\\` to delete the \\`${key}\\` header`);\n            }\n        }\n        if (options.decompress && is_1.default.undefined(headers['accept-encoding'])) {\n            headers['accept-encoding'] = supportsBrotli ? 'gzip, deflate, br' : 'gzip, deflate';\n        }\n        // Set cookies\n        if (options.cookieJar) {\n            const cookieString = await options.cookieJar.getCookieString(options.url.toString());\n            if (is_1.default.nonEmptyString(cookieString)) {\n                options.headers.cookie = cookieString;\n            }\n        }\n        for (const hook of options.hooks.beforeRequest) {\n            // eslint-disable-next-line no-await-in-loop\n            const result = await hook(options);\n            if (!is_1.default.undefined(result)) {\n                // @ts-expect-error Skip the type mismatch to support abstract responses\n                options.request = () => result;\n                break;\n            }\n        }\n        if (options.body && this[kBody] !== options.body) {\n            this[kBody] = options.body;\n        }\n        const { agent, request, timeout, url } = options;\n        if (options.dnsCache && !('lookup' in options)) {\n            options.lookup = options.dnsCache.lookup;\n        }\n        // UNIX sockets\n        if (url.hostname === 'unix') {\n            const matches = /(?<socketPath>.+?):(?<path>.+)/.exec(`${url.pathname}${url.search}`);\n            if (matches === null || matches === void 0 ? void 0 : matches.groups) {\n                const { socketPath, path } = matches.groups;\n                Object.assign(options, {\n                    socketPath,\n                    path,\n                    host: ''\n                });\n            }\n        }\n        const isHttps = url.protocol === 'https:';\n        // Fallback function\n        let fallbackFn;\n        if (options.http2) {\n            fallbackFn = http2wrapper.auto;\n        }\n        else {\n            fallbackFn = isHttps ? https.request : http.request;\n        }\n        const realFn = (_a = options.request) !== null && _a !== void 0 ? _a : fallbackFn;\n        // Cache support\n        const fn = options.cache ? this._createCacheableRequest : realFn;\n        // Pass an agent directly when HTTP2 is disabled\n        if (agent && !options.http2) {\n            options.agent = agent[isHttps ? 'https' : 'http'];\n        }\n        // Prepare plain HTTP request options\n        options[kRequest] = realFn;\n        delete options.request;\n        // TODO: Fix this ignore.\n        // @ts-expect-error\n        delete options.timeout;\n        const requestOptions = options;\n        requestOptions.shared = (_b = options.cacheOptions) === null || _b === void 0 ? void 0 : _b.shared;\n        requestOptions.cacheHeuristic = (_c = options.cacheOptions) === null || _c === void 0 ? void 0 : _c.cacheHeuristic;\n        requestOptions.immutableMinTimeToLive = (_d = options.cacheOptions) === null || _d === void 0 ? void 0 : _d.immutableMinTimeToLive;\n        requestOptions.ignoreCargoCult = (_e = options.cacheOptions) === null || _e === void 0 ? void 0 : _e.ignoreCargoCult;\n        // If `dnsLookupIpVersion` is not present do not override `family`\n        if (options.dnsLookupIpVersion !== undefined) {\n            try {\n                requestOptions.family = dns_ip_version_1.dnsLookupIpVersionToFamily(options.dnsLookupIpVersion);\n            }\n            catch (_f) {\n                throw new Error('Invalid `dnsLookupIpVersion` option value');\n            }\n        }\n        // HTTPS options remapping\n        if (options.https) {\n            if ('rejectUnauthorized' in options.https) {\n                requestOptions.rejectUnauthorized = options.https.rejectUnauthorized;\n            }\n            if (options.https.checkServerIdentity) {\n                requestOptions.checkServerIdentity = options.https.checkServerIdentity;\n            }\n            if (options.https.certificateAuthority) {\n                requestOptions.ca = options.https.certificateAuthority;\n            }\n            if (options.https.certificate) {\n                requestOptions.cert = options.https.certificate;\n            }\n            if (options.https.key) {\n                requestOptions.key = options.https.key;\n            }\n            if (options.https.passphrase) {\n                requestOptions.passphrase = options.https.passphrase;\n            }\n            if (options.https.pfx) {\n                requestOptions.pfx = options.https.pfx;\n            }\n        }\n        try {\n            let requestOrResponse = await fn(url, requestOptions);\n            if (is_1.default.undefined(requestOrResponse)) {\n                requestOrResponse = fallbackFn(url, requestOptions);\n            }\n            // Restore options\n            options.request = request;\n            options.timeout = timeout;\n            options.agent = agent;\n            // HTTPS options restore\n            if (options.https) {\n                if ('rejectUnauthorized' in options.https) {\n                    delete requestOptions.rejectUnauthorized;\n                }\n                if (options.https.checkServerIdentity) {\n                    // @ts-expect-error - This one will be removed when we remove the alias.\n                    delete requestOptions.checkServerIdentity;\n                }\n                if (options.https.certificateAuthority) {\n                    delete requestOptions.ca;\n                }\n                if (options.https.certificate) {\n                    delete requestOptions.cert;\n                }\n                if (options.https.key) {\n                    delete requestOptions.key;\n                }\n                if (options.https.passphrase) {\n                    delete requestOptions.passphrase;\n                }\n                if (options.https.pfx) {\n                    delete requestOptions.pfx;\n                }\n            }\n            if (isClientRequest(requestOrResponse)) {\n                this._onRequest(requestOrResponse);\n                // Emit the response after the stream has been ended\n            }\n            else if (this.writable) {\n                this.once('finish', () => {\n                    void this._onResponse(requestOrResponse);\n                });\n                this._unlockWrite();\n                this.end();\n                this._lockWrite();\n            }\n            else {\n                void this._onResponse(requestOrResponse);\n            }\n        }\n        catch (error) {\n            if (error instanceof CacheableRequest.CacheError) {\n                throw new CacheError(error, this);\n            }\n            throw new RequestError(error.message, error, this);\n        }\n    }\n    async _error(error) {\n        try {\n            for (const hook of this.options.hooks.beforeError) {\n                // eslint-disable-next-line no-await-in-loop\n                error = await hook(error);\n            }\n        }\n        catch (error_) {\n            error = new RequestError(error_.message, error_, this);\n        }\n        this.destroy(error);\n    }\n    _beforeError(error) {\n        if (this[kStopReading]) {\n            return;\n        }\n        const { options } = this;\n        const retryCount = this.retryCount + 1;\n        this[kStopReading] = true;\n        if (!(error instanceof RequestError)) {\n            error = new RequestError(error.message, error, this);\n        }\n        const typedError = error;\n        const { response } = typedError;\n        void (async () => {\n            if (response && !response.body) {\n                response.setEncoding(this._readableState.encoding);\n                try {\n                    response.rawBody = await get_buffer_1.default(response);\n                    response.body = response.rawBody.toString();\n                }\n                catch (_a) { }\n            }\n            if (this.listenerCount('retry') !== 0) {\n                let backoff;\n                try {\n                    let retryAfter;\n                    if (response && 'retry-after' in response.headers) {\n                        retryAfter = Number(response.headers['retry-after']);\n                        if (Number.isNaN(retryAfter)) {\n                            retryAfter = Date.parse(response.headers['retry-after']) - Date.now();\n                            if (retryAfter <= 0) {\n                                retryAfter = 1;\n                            }\n                        }\n                        else {\n                            retryAfter *= 1000;\n                        }\n                    }\n                    backoff = await options.retry.calculateDelay({\n                        attemptCount: retryCount,\n                        retryOptions: options.retry,\n                        error: typedError,\n                        retryAfter,\n                        computedValue: calculate_retry_delay_1.default({\n                            attemptCount: retryCount,\n                            retryOptions: options.retry,\n                            error: typedError,\n                            retryAfter,\n                            computedValue: 0\n                        })\n                    });\n                }\n                catch (error_) {\n                    void this._error(new RequestError(error_.message, error_, this));\n                    return;\n                }\n                if (backoff) {\n                    const retry = async () => {\n                        try {\n                            for (const hook of this.options.hooks.beforeRetry) {\n                                // eslint-disable-next-line no-await-in-loop\n                                await hook(this.options, typedError, retryCount);\n                            }\n                        }\n                        catch (error_) {\n                            void this._error(new RequestError(error_.message, error, this));\n                            return;\n                        }\n                        // Something forced us to abort the retry\n                        if (this.destroyed) {\n                            return;\n                        }\n                        this.destroy();\n                        this.emit('retry', retryCount, error);\n                    };\n                    this[kRetryTimeout] = setTimeout(retry, backoff);\n                    return;\n                }\n            }\n            void this._error(typedError);\n        })();\n    }\n    _read() {\n        this[kTriggerRead] = true;\n        const response = this[kResponse];\n        if (response && !this[kStopReading]) {\n            // We cannot put this in the `if` above\n            // because `.read()` also triggers the `end` event\n            if (response.readableLength) {\n                this[kTriggerRead] = false;\n            }\n            let data;\n            while ((data = response.read()) !== null) {\n                this[kDownloadedSize] += data.length;\n                this[kStartedReading] = true;\n                const progress = this.downloadProgress;\n                if (progress.percent < 1) {\n                    this.emit('downloadProgress', progress);\n                }\n                this.push(data);\n            }\n        }\n    }\n    // Node.js 12 has incorrect types, so the encoding must be a string\n    _write(chunk, encoding, callback) {\n        const write = () => {\n            this._writeRequest(chunk, encoding, callback);\n        };\n        if (this.requestInitialized) {\n            write();\n        }\n        else {\n            this[kJobs].push(write);\n        }\n    }\n    _writeRequest(chunk, encoding, callback) {\n        if (this[kRequest].destroyed) {\n            // Probably the `ClientRequest` instance will throw\n            return;\n        }\n        this._progressCallbacks.push(() => {\n            this[kUploadedSize] += Buffer.byteLength(chunk, encoding);\n            const progress = this.uploadProgress;\n            if (progress.percent < 1) {\n                this.emit('uploadProgress', progress);\n            }\n        });\n        // TODO: What happens if it's from cache? Then this[kRequest] won't be defined.\n        this[kRequest].write(chunk, encoding, (error) => {\n            if (!error && this._progressCallbacks.length > 0) {\n                this._progressCallbacks.shift()();\n            }\n            callback(error);\n        });\n    }\n    _final(callback) {\n        const endRequest = () => {\n            // FIX: Node.js 10 calls the write callback AFTER the end callback!\n            while (this._progressCallbacks.length !== 0) {\n                this._progressCallbacks.shift()();\n            }\n            // We need to check if `this[kRequest]` is present,\n            // because it isn't when we use cache.\n            if (!(kRequest in this)) {\n                callback();\n                return;\n            }\n            if (this[kRequest].destroyed) {\n                callback();\n                return;\n            }\n            this[kRequest].end((error) => {\n                if (!error) {\n                    this[kBodySize] = this[kUploadedSize];\n                    this.emit('uploadProgress', this.uploadProgress);\n                    this[kRequest].emit('upload-complete');\n                }\n                callback(error);\n            });\n        };\n        if (this.requestInitialized) {\n            endRequest();\n        }\n        else {\n            this[kJobs].push(endRequest);\n        }\n    }\n    _destroy(error, callback) {\n        var _a;\n        this[kStopReading] = true;\n        // Prevent further retries\n        clearTimeout(this[kRetryTimeout]);\n        if (kRequest in this) {\n            this[kCancelTimeouts]();\n            // TODO: Remove the next `if` when these get fixed:\n            // - https://github.com/nodejs/node/issues/32851\n            if (!((_a = this[kResponse]) === null || _a === void 0 ? void 0 : _a.complete)) {\n                this[kRequest].destroy();\n            }\n        }\n        if (error !== null && !is_1.default.undefined(error) && !(error instanceof RequestError)) {\n            error = new RequestError(error.message, error, this);\n        }\n        callback(error);\n    }\n    get _isAboutToError() {\n        return this[kStopReading];\n    }\n    /**\n    The remote IP address.\n    */\n    get ip() {\n        var _a;\n        return (_a = this.socket) === null || _a === void 0 ? void 0 : _a.remoteAddress;\n    }\n    /**\n    Indicates whether the request has been aborted or not.\n    */\n    get aborted() {\n        var _a, _b, _c;\n        return ((_b = (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.destroyed) !== null && _b !== void 0 ? _b : this.destroyed) && !((_c = this[kOriginalResponse]) === null || _c === void 0 ? void 0 : _c.complete);\n    }\n    get socket() {\n        var _a, _b;\n        return (_b = (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.socket) !== null && _b !== void 0 ? _b : undefined;\n    }\n    /**\n    Progress event for downloading (receiving a response).\n    */\n    get downloadProgress() {\n        let percent;\n        if (this[kResponseSize]) {\n            percent = this[kDownloadedSize] / this[kResponseSize];\n        }\n        else if (this[kResponseSize] === this[kDownloadedSize]) {\n            percent = 1;\n        }\n        else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this[kDownloadedSize],\n            total: this[kResponseSize]\n        };\n    }\n    /**\n    Progress event for uploading (sending a request).\n    */\n    get uploadProgress() {\n        let percent;\n        if (this[kBodySize]) {\n            percent = this[kUploadedSize] / this[kBodySize];\n        }\n        else if (this[kBodySize] === this[kUploadedSize]) {\n            percent = 1;\n        }\n        else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this[kUploadedSize],\n            total: this[kBodySize]\n        };\n    }\n    /**\n    The object contains the following properties:\n\n    - `start` - Time when the request started.\n    - `socket` - Time when a socket was assigned to the request.\n    - `lookup` - Time when the DNS lookup finished.\n    - `connect` - Time when the socket successfully connected.\n    - `secureConnect` - Time when the socket securely connected.\n    - `upload` - Time when the request finished uploading.\n    - `response` - Time when the request fired `response` event.\n    - `end` - Time when the response fired `end` event.\n    - `error` - Time when the request fired `error` event.\n    - `abort` - Time when the request fired `abort` event.\n    - `phases`\n        - `wait` - `timings.socket - timings.start`\n        - `dns` - `timings.lookup - timings.socket`\n        - `tcp` - `timings.connect - timings.lookup`\n        - `tls` - `timings.secureConnect - timings.connect`\n        - `request` - `timings.upload - (timings.secureConnect || timings.connect)`\n        - `firstByte` - `timings.response - timings.upload`\n        - `download` - `timings.end - timings.response`\n        - `total` - `(timings.end || timings.error || timings.abort) - timings.start`\n\n    If something has not been measured yet, it will be `undefined`.\n\n    __Note__: The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n    */\n    get timings() {\n        var _a;\n        return (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.timings;\n    }\n    /**\n    Whether the response was retrieved from the cache.\n    */\n    get isFromCache() {\n        return this[kIsFromCache];\n    }\n    pipe(destination, options) {\n        if (this[kStartedReading]) {\n            throw new Error('Failed to pipe. The response has been emitted already.');\n        }\n        if (destination instanceof http_1.ServerResponse) {\n            this[kServerResponsesPiped].add(destination);\n        }\n        return super.pipe(destination, options);\n    }\n    unpipe(destination) {\n        if (destination instanceof http_1.ServerResponse) {\n            this[kServerResponsesPiped].delete(destination);\n        }\n        super.unpipe(destination);\n        return this;\n    }\n}\nexports[\"default\"] = Request;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/dns-ip-version.js":
/*!*******************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/dns-ip-version.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.dnsLookupIpVersionToFamily = exports.isDnsLookupIpVersion = void 0;\nconst conversionTable = {\n    auto: 0,\n    ipv4: 4,\n    ipv6: 6\n};\nexports.isDnsLookupIpVersion = (value) => {\n    return value in conversionTable;\n};\nexports.dnsLookupIpVersionToFamily = (dnsLookupIpVersion) => {\n    if (exports.isDnsLookupIpVersion(dnsLookupIpVersion)) {\n        return conversionTable[dnsLookupIpVersion];\n    }\n    throw new Error('Invalid DNS lookup IP version');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZG5zLWlwLXZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDLEdBQUcsNEJBQTRCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcSGFja2F0aG9uXFxIYWNrc3BpcmVcXG5vZGVfbW9kdWxlc1xcZ290XFxkaXN0XFxzb3VyY2VcXGNvcmVcXHV0aWxzXFxkbnMtaXAtdmVyc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZG5zTG9va3VwSXBWZXJzaW9uVG9GYW1pbHkgPSBleHBvcnRzLmlzRG5zTG9va3VwSXBWZXJzaW9uID0gdm9pZCAwO1xuY29uc3QgY29udmVyc2lvblRhYmxlID0ge1xuICAgIGF1dG86IDAsXG4gICAgaXB2NDogNCxcbiAgICBpcHY2OiA2XG59O1xuZXhwb3J0cy5pc0Ruc0xvb2t1cElwVmVyc2lvbiA9ICh2YWx1ZSkgPT4ge1xuICAgIHJldHVybiB2YWx1ZSBpbiBjb252ZXJzaW9uVGFibGU7XG59O1xuZXhwb3J0cy5kbnNMb29rdXBJcFZlcnNpb25Ub0ZhbWlseSA9IChkbnNMb29rdXBJcFZlcnNpb24pID0+IHtcbiAgICBpZiAoZXhwb3J0cy5pc0Ruc0xvb2t1cElwVmVyc2lvbihkbnNMb29rdXBJcFZlcnNpb24pKSB7XG4gICAgICAgIHJldHVybiBjb252ZXJzaW9uVGFibGVbZG5zTG9va3VwSXBWZXJzaW9uXTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEROUyBsb29rdXAgSVAgdmVyc2lvbicpO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/dns-ip-version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/get-body-size.js":
/*!******************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/get-body-size.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst is_form_data_1 = __webpack_require__(/*! ./is-form-data */ \"(rsc)/./node_modules/got/dist/source/core/utils/is-form-data.js\");\nconst statAsync = util_1.promisify(fs_1.stat);\nexports[\"default\"] = async (body, headers) => {\n    if (headers && 'content-length' in headers) {\n        return Number(headers['content-length']);\n    }\n    if (!body) {\n        return 0;\n    }\n    if (is_1.default.string(body)) {\n        return Buffer.byteLength(body);\n    }\n    if (is_1.default.buffer(body)) {\n        return body.length;\n    }\n    if (is_form_data_1.default(body)) {\n        return util_1.promisify(body.getLength.bind(body))();\n    }\n    if (body instanceof fs_1.ReadStream) {\n        const { size } = await statAsync(body.path);\n        if (size === 0) {\n            return undefined;\n        }\n        return size;\n    }\n    return undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJvZHktc2l6ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsY0FBSTtBQUN6QixlQUFlLG1CQUFPLENBQUMsa0JBQU07QUFDN0IsYUFBYSxtQkFBTyxDQUFDLDZFQUFrQjtBQUN2Qyx1QkFBdUIsbUJBQU8sQ0FBQyx1RkFBZ0I7QUFDL0M7QUFDQSxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxIYWNrYXRob25cXEhhY2tzcGlyZVxcbm9kZV9tb2R1bGVzXFxnb3RcXGRpc3RcXHNvdXJjZVxcY29yZVxcdXRpbHNcXGdldC1ib2R5LXNpemUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBmc18xID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcInV0aWxcIik7XG5jb25zdCBpc18xID0gcmVxdWlyZShcIkBzaW5kcmVzb3JodXMvaXNcIik7XG5jb25zdCBpc19mb3JtX2RhdGFfMSA9IHJlcXVpcmUoXCIuL2lzLWZvcm0tZGF0YVwiKTtcbmNvbnN0IHN0YXRBc3luYyA9IHV0aWxfMS5wcm9taXNpZnkoZnNfMS5zdGF0KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFzeW5jIChib2R5LCBoZWFkZXJzKSA9PiB7XG4gICAgaWYgKGhlYWRlcnMgJiYgJ2NvbnRlbnQtbGVuZ3RoJyBpbiBoZWFkZXJzKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIoaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSk7XG4gICAgfVxuICAgIGlmICghYm9keSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGlzXzEuZGVmYXVsdC5zdHJpbmcoYm9keSkpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5ieXRlTGVuZ3RoKGJvZHkpO1xuICAgIH1cbiAgICBpZiAoaXNfMS5kZWZhdWx0LmJ1ZmZlcihib2R5KSkge1xuICAgICAgICByZXR1cm4gYm9keS5sZW5ndGg7XG4gICAgfVxuICAgIGlmIChpc19mb3JtX2RhdGFfMS5kZWZhdWx0KGJvZHkpKSB7XG4gICAgICAgIHJldHVybiB1dGlsXzEucHJvbWlzaWZ5KGJvZHkuZ2V0TGVuZ3RoLmJpbmQoYm9keSkpKCk7XG4gICAgfVxuICAgIGlmIChib2R5IGluc3RhbmNlb2YgZnNfMS5SZWFkU3RyZWFtKSB7XG4gICAgICAgIGNvbnN0IHsgc2l6ZSB9ID0gYXdhaXQgc3RhdEFzeW5jKGJvZHkucGF0aCk7XG4gICAgICAgIGlmIChzaXplID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/get-body-size.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/get-buffer.js":
/*!***************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/get-buffer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n// TODO: Update https://github.com/sindresorhus/get-stream\nconst getBuffer = async (stream) => {\n    const chunks = [];\n    let length = 0;\n    for await (const chunk of stream) {\n        chunks.push(chunk);\n        length += Buffer.byteLength(chunk);\n    }\n    if (Buffer.isBuffer(chunks[0])) {\n        return Buffer.concat(chunks, length);\n    }\n    return Buffer.from(chunks.join(''));\n};\nexports[\"default\"] = getBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJ1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlIiwic291cmNlcyI6WyJDOlxcSGFja2F0aG9uXFxIYWNrc3BpcmVcXG5vZGVfbW9kdWxlc1xcZ290XFxkaXN0XFxzb3VyY2VcXGNvcmVcXHV0aWxzXFxnZXQtYnVmZmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gVE9ETzogVXBkYXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZ2V0LXN0cmVhbVxuY29uc3QgZ2V0QnVmZmVyID0gYXN5bmMgKHN0cmVhbSkgPT4ge1xuICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgIGxldCBsZW5ndGggPSAwO1xuICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygc3RyZWFtKSB7XG4gICAgICAgIGNodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgbGVuZ3RoICs9IEJ1ZmZlci5ieXRlTGVuZ3RoKGNodW5rKTtcbiAgICB9XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjaHVua3NbMF0pKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGNodW5rcywgbGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rcy5qb2luKCcnKSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0QnVmZmVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/get-buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/is-form-data.js":
/*!*****************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/is-form-data.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nexports[\"default\"] = (body) => is_1.default.nodeStream(body) && is_1.default.function_(body.getBoundary);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtZm9ybS1kYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyw2RUFBa0I7QUFDdkMsa0JBQWUiLCJzb3VyY2VzIjpbIkM6XFxIYWNrYXRob25cXEhhY2tzcGlyZVxcbm9kZV9tb2R1bGVzXFxnb3RcXGRpc3RcXHNvdXJjZVxcY29yZVxcdXRpbHNcXGlzLWZvcm0tZGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGlzXzEgPSByZXF1aXJlKFwiQHNpbmRyZXNvcmh1cy9pc1wiKTtcbmV4cG9ydHMuZGVmYXVsdCA9IChib2R5KSA9PiBpc18xLmRlZmF1bHQubm9kZVN0cmVhbShib2R5KSAmJiBpc18xLmRlZmF1bHQuZnVuY3Rpb25fKGJvZHkuZ2V0Qm91bmRhcnkpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/is-form-data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/is-response-ok.js":
/*!*******************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/is-response-ok.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isResponseOk = void 0;\nexports.isResponseOk = (response) => {\n    const { statusCode } = response;\n    const limitStatusCode = response.request.options.followRedirect ? 299 : 399;\n    return (statusCode >= 200 && statusCode <= limitStatusCode) || statusCode === 304;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtcmVzcG9uc2Utb2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcSGFja2F0aG9uXFxIYWNrc3BpcmVcXG5vZGVfbW9kdWxlc1xcZ290XFxkaXN0XFxzb3VyY2VcXGNvcmVcXHV0aWxzXFxpcy1yZXNwb25zZS1vay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNSZXNwb25zZU9rID0gdm9pZCAwO1xuZXhwb3J0cy5pc1Jlc3BvbnNlT2sgPSAocmVzcG9uc2UpID0+IHtcbiAgICBjb25zdCB7IHN0YXR1c0NvZGUgfSA9IHJlc3BvbnNlO1xuICAgIGNvbnN0IGxpbWl0U3RhdHVzQ29kZSA9IHJlc3BvbnNlLnJlcXVlc3Qub3B0aW9ucy5mb2xsb3dSZWRpcmVjdCA/IDI5OSA6IDM5OTtcbiAgICByZXR1cm4gKHN0YXR1c0NvZGUgPj0gMjAwICYmIHN0YXR1c0NvZGUgPD0gbGltaXRTdGF0dXNDb2RlKSB8fCBzdGF0dXNDb2RlID09PSAzMDQ7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/is-response-ok.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/options-to-url.js":
/*!*******************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/options-to-url.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/* istanbul ignore file: deprecated */\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst keys = [\n    'protocol',\n    'host',\n    'hostname',\n    'port',\n    'pathname',\n    'search'\n];\nexports[\"default\"] = (origin, options) => {\n    var _a, _b;\n    if (options.path) {\n        if (options.pathname) {\n            throw new TypeError('Parameters `path` and `pathname` are mutually exclusive.');\n        }\n        if (options.search) {\n            throw new TypeError('Parameters `path` and `search` are mutually exclusive.');\n        }\n        if (options.searchParams) {\n            throw new TypeError('Parameters `path` and `searchParams` are mutually exclusive.');\n        }\n    }\n    if (options.search && options.searchParams) {\n        throw new TypeError('Parameters `search` and `searchParams` are mutually exclusive.');\n    }\n    if (!origin) {\n        if (!options.protocol) {\n            throw new TypeError('No URL protocol specified');\n        }\n        origin = `${options.protocol}//${(_b = (_a = options.hostname) !== null && _a !== void 0 ? _a : options.host) !== null && _b !== void 0 ? _b : ''}`;\n    }\n    const url = new url_1.URL(origin);\n    if (options.path) {\n        const searchIndex = options.path.indexOf('?');\n        if (searchIndex === -1) {\n            options.pathname = options.path;\n        }\n        else {\n            options.pathname = options.path.slice(0, searchIndex);\n            options.search = options.path.slice(searchIndex + 1);\n        }\n        delete options.path;\n    }\n    for (const key of keys) {\n        if (options[key]) {\n            url[key] = options[key].toString();\n        }\n    }\n    return url;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvb3B0aW9ucy10by11cmwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQSxjQUFjLG1CQUFPLENBQUMsZ0JBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCLElBQUksaUhBQWlIO0FBQzFKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxIYWNrYXRob25cXEhhY2tzcGlyZVxcbm9kZV9tb2R1bGVzXFxnb3RcXGRpc3RcXHNvdXJjZVxcY29yZVxcdXRpbHNcXG9wdGlvbnMtdG8tdXJsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaXN0YW5idWwgaWdub3JlIGZpbGU6IGRlcHJlY2F0ZWQgKi9cbmNvbnN0IHVybF8xID0gcmVxdWlyZShcInVybFwiKTtcbmNvbnN0IGtleXMgPSBbXG4gICAgJ3Byb3RvY29sJyxcbiAgICAnaG9zdCcsXG4gICAgJ2hvc3RuYW1lJyxcbiAgICAncG9ydCcsXG4gICAgJ3BhdGhuYW1lJyxcbiAgICAnc2VhcmNoJ1xuXTtcbmV4cG9ydHMuZGVmYXVsdCA9IChvcmlnaW4sIG9wdGlvbnMpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmIChvcHRpb25zLnBhdGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMucGF0aG5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcmFtZXRlcnMgYHBhdGhgIGFuZCBgcGF0aG5hbWVgIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuc2VhcmNoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXJhbWV0ZXJzIGBwYXRoYCBhbmQgYHNlYXJjaGAgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5zZWFyY2hQYXJhbXMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcmFtZXRlcnMgYHBhdGhgIGFuZCBgc2VhcmNoUGFyYW1zYCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnNlYXJjaCAmJiBvcHRpb25zLnNlYXJjaFBhcmFtcykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXJhbWV0ZXJzIGBzZWFyY2hgIGFuZCBgc2VhcmNoUGFyYW1zYCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLicpO1xuICAgIH1cbiAgICBpZiAoIW9yaWdpbikge1xuICAgICAgICBpZiAoIW9wdGlvbnMucHJvdG9jb2wpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIFVSTCBwcm90b2NvbCBzcGVjaWZpZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBvcmlnaW4gPSBgJHtvcHRpb25zLnByb3RvY29sfS8vJHsoX2IgPSAoX2EgPSBvcHRpb25zLmhvc3RuYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBvcHRpb25zLmhvc3QpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnfWA7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IG5ldyB1cmxfMS5VUkwob3JpZ2luKTtcbiAgICBpZiAob3B0aW9ucy5wYXRoKSB7XG4gICAgICAgIGNvbnN0IHNlYXJjaEluZGV4ID0gb3B0aW9ucy5wYXRoLmluZGV4T2YoJz8nKTtcbiAgICAgICAgaWYgKHNlYXJjaEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgb3B0aW9ucy5wYXRobmFtZSA9IG9wdGlvbnMucGF0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMucGF0aG5hbWUgPSBvcHRpb25zLnBhdGguc2xpY2UoMCwgc2VhcmNoSW5kZXgpO1xuICAgICAgICAgICAgb3B0aW9ucy5zZWFyY2ggPSBvcHRpb25zLnBhdGguc2xpY2Uoc2VhcmNoSW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgb3B0aW9ucy5wYXRoO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIGlmIChvcHRpb25zW2tleV0pIHtcbiAgICAgICAgICAgIHVybFtrZXldID0gb3B0aW9uc1trZXldLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/options-to-url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/proxy-events.js":
/*!*****************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/proxy-events.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nfunction default_1(from, to, events) {\n    const fns = {};\n    for (const event of events) {\n        fns[event] = (...args) => {\n            to.emit(event, ...args);\n        };\n        from.on(event, fns[event]);\n    }\n    return () => {\n        for (const event of events) {\n            from.off(event, fns[event]);\n        }\n    };\n}\nexports[\"default\"] = default_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvcHJveHktZXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsiQzpcXEhhY2thdGhvblxcSGFja3NwaXJlXFxub2RlX21vZHVsZXNcXGdvdFxcZGlzdFxcc291cmNlXFxjb3JlXFx1dGlsc1xccHJveHktZXZlbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gZGVmYXVsdF8xKGZyb20sIHRvLCBldmVudHMpIHtcbiAgICBjb25zdCBmbnMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICBmbnNbZXZlbnRdID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIHRvLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgICBmcm9tLm9uKGV2ZW50LCBmbnNbZXZlbnRdKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgICAgICAgIGZyb20ub2ZmKGV2ZW50LCBmbnNbZXZlbnRdKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/proxy-events.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/timed-out.js":
/*!**************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/timed-out.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TimeoutError = void 0;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst unhandle_1 = __webpack_require__(/*! ./unhandle */ \"(rsc)/./node_modules/got/dist/source/core/utils/unhandle.js\");\nconst reentry = Symbol('reentry');\nconst noop = () => { };\nclass TimeoutError extends Error {\n    constructor(threshold, event) {\n        super(`Timeout awaiting '${event}' for ${threshold}ms`);\n        this.event = event;\n        this.name = 'TimeoutError';\n        this.code = 'ETIMEDOUT';\n    }\n}\nexports.TimeoutError = TimeoutError;\nexports[\"default\"] = (request, delays, options) => {\n    if (reentry in request) {\n        return noop;\n    }\n    request[reentry] = true;\n    const cancelers = [];\n    const { once, unhandleAll } = unhandle_1.default();\n    const addTimeout = (delay, callback, event) => {\n        var _a;\n        const timeout = setTimeout(callback, delay, delay, event);\n        (_a = timeout.unref) === null || _a === void 0 ? void 0 : _a.call(timeout);\n        const cancel = () => {\n            clearTimeout(timeout);\n        };\n        cancelers.push(cancel);\n        return cancel;\n    };\n    const { host, hostname } = options;\n    const timeoutHandler = (delay, event) => {\n        request.destroy(new TimeoutError(delay, event));\n    };\n    const cancelTimeouts = () => {\n        for (const cancel of cancelers) {\n            cancel();\n        }\n        unhandleAll();\n    };\n    request.once('error', error => {\n        cancelTimeouts();\n        // Save original behavior\n        /* istanbul ignore next */\n        if (request.listenerCount('error') === 0) {\n            throw error;\n        }\n    });\n    request.once('close', cancelTimeouts);\n    once(request, 'response', (response) => {\n        once(response, 'end', cancelTimeouts);\n    });\n    if (typeof delays.request !== 'undefined') {\n        addTimeout(delays.request, timeoutHandler, 'request');\n    }\n    if (typeof delays.socket !== 'undefined') {\n        const socketTimeoutHandler = () => {\n            timeoutHandler(delays.socket, 'socket');\n        };\n        request.setTimeout(delays.socket, socketTimeoutHandler);\n        // `request.setTimeout(0)` causes a memory leak.\n        // We can just remove the listener and forget about the timer - it's unreffed.\n        // See https://github.com/sindresorhus/got/issues/690\n        cancelers.push(() => {\n            request.removeListener('timeout', socketTimeoutHandler);\n        });\n    }\n    once(request, 'socket', (socket) => {\n        var _a;\n        const { socketPath } = request;\n        /* istanbul ignore next: hard to test */\n        if (socket.connecting) {\n            const hasPath = Boolean(socketPath !== null && socketPath !== void 0 ? socketPath : net.isIP((_a = hostname !== null && hostname !== void 0 ? hostname : host) !== null && _a !== void 0 ? _a : '') !== 0);\n            if (typeof delays.lookup !== 'undefined' && !hasPath && typeof socket.address().address === 'undefined') {\n                const cancelTimeout = addTimeout(delays.lookup, timeoutHandler, 'lookup');\n                once(socket, 'lookup', cancelTimeout);\n            }\n            if (typeof delays.connect !== 'undefined') {\n                const timeConnect = () => addTimeout(delays.connect, timeoutHandler, 'connect');\n                if (hasPath) {\n                    once(socket, 'connect', timeConnect());\n                }\n                else {\n                    once(socket, 'lookup', (error) => {\n                        if (error === null) {\n                            once(socket, 'connect', timeConnect());\n                        }\n                    });\n                }\n            }\n            if (typeof delays.secureConnect !== 'undefined' && options.protocol === 'https:') {\n                once(socket, 'connect', () => {\n                    const cancelTimeout = addTimeout(delays.secureConnect, timeoutHandler, 'secureConnect');\n                    once(socket, 'secureConnect', cancelTimeout);\n                });\n            }\n        }\n        if (typeof delays.send !== 'undefined') {\n            const timeRequest = () => addTimeout(delays.send, timeoutHandler, 'send');\n            /* istanbul ignore next: hard to test */\n            if (socket.connecting) {\n                once(socket, 'connect', () => {\n                    once(request, 'upload-complete', timeRequest());\n                });\n            }\n            else {\n                once(request, 'upload-complete', timeRequest());\n            }\n        }\n    });\n    if (typeof delays.response !== 'undefined') {\n        once(request, 'upload-complete', () => {\n            const cancelTimeout = addTimeout(delays.response, timeoutHandler, 'response');\n            once(request, 'response', cancelTimeout);\n        });\n    }\n    return cancelTimeouts;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdGltZWQtb3V0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQixZQUFZLG1CQUFPLENBQUMsZ0JBQUs7QUFDekIsbUJBQW1CLG1CQUFPLENBQUMsK0VBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsTUFBTSxRQUFRLFVBQVU7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQixrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksaUJBQWlCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcSGFja2F0aG9uXFxIYWNrc3BpcmVcXG5vZGVfbW9kdWxlc1xcZ290XFxkaXN0XFxzb3VyY2VcXGNvcmVcXHV0aWxzXFx0aW1lZC1vdXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRpbWVvdXRFcnJvciA9IHZvaWQgMDtcbmNvbnN0IG5ldCA9IHJlcXVpcmUoXCJuZXRcIik7XG5jb25zdCB1bmhhbmRsZV8xID0gcmVxdWlyZShcIi4vdW5oYW5kbGVcIik7XG5jb25zdCByZWVudHJ5ID0gU3ltYm9sKCdyZWVudHJ5Jyk7XG5jb25zdCBub29wID0gKCkgPT4geyB9O1xuY2xhc3MgVGltZW91dEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHRocmVzaG9sZCwgZXZlbnQpIHtcbiAgICAgICAgc3VwZXIoYFRpbWVvdXQgYXdhaXRpbmcgJyR7ZXZlbnR9JyBmb3IgJHt0aHJlc2hvbGR9bXNgKTtcbiAgICAgICAgdGhpcy5ldmVudCA9IGV2ZW50O1xuICAgICAgICB0aGlzLm5hbWUgPSAnVGltZW91dEVycm9yJztcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VUSU1FRE9VVCc7XG4gICAgfVxufVxuZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBUaW1lb3V0RXJyb3I7XG5leHBvcnRzLmRlZmF1bHQgPSAocmVxdWVzdCwgZGVsYXlzLCBvcHRpb25zKSA9PiB7XG4gICAgaWYgKHJlZW50cnkgaW4gcmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICB9XG4gICAgcmVxdWVzdFtyZWVudHJ5XSA9IHRydWU7XG4gICAgY29uc3QgY2FuY2VsZXJzID0gW107XG4gICAgY29uc3QgeyBvbmNlLCB1bmhhbmRsZUFsbCB9ID0gdW5oYW5kbGVfMS5kZWZhdWx0KCk7XG4gICAgY29uc3QgYWRkVGltZW91dCA9IChkZWxheSwgY2FsbGJhY2ssIGV2ZW50KSA9PiB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5LCBkZWxheSwgZXZlbnQpO1xuICAgICAgICAoX2EgPSB0aW1lb3V0LnVucmVmKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aW1lb3V0KTtcbiAgICAgICAgY29uc3QgY2FuY2VsID0gKCkgPT4ge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB9O1xuICAgICAgICBjYW5jZWxlcnMucHVzaChjYW5jZWwpO1xuICAgICAgICByZXR1cm4gY2FuY2VsO1xuICAgIH07XG4gICAgY29uc3QgeyBob3N0LCBob3N0bmFtZSB9ID0gb3B0aW9ucztcbiAgICBjb25zdCB0aW1lb3V0SGFuZGxlciA9IChkZWxheSwgZXZlbnQpID0+IHtcbiAgICAgICAgcmVxdWVzdC5kZXN0cm95KG5ldyBUaW1lb3V0RXJyb3IoZGVsYXksIGV2ZW50KSk7XG4gICAgfTtcbiAgICBjb25zdCBjYW5jZWxUaW1lb3V0cyA9ICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBjYW5jZWwgb2YgY2FuY2VsZXJzKSB7XG4gICAgICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgICB1bmhhbmRsZUFsbCgpO1xuICAgIH07XG4gICAgcmVxdWVzdC5vbmNlKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICAgICAgY2FuY2VsVGltZW91dHMoKTtcbiAgICAgICAgLy8gU2F2ZSBvcmlnaW5hbCBiZWhhdmlvclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBpZiAocmVxdWVzdC5saXN0ZW5lckNvdW50KCdlcnJvcicpID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJlcXVlc3Qub25jZSgnY2xvc2UnLCBjYW5jZWxUaW1lb3V0cyk7XG4gICAgb25jZShyZXF1ZXN0LCAncmVzcG9uc2UnLCAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgb25jZShyZXNwb25zZSwgJ2VuZCcsIGNhbmNlbFRpbWVvdXRzKTtcbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIGRlbGF5cy5yZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhZGRUaW1lb3V0KGRlbGF5cy5yZXF1ZXN0LCB0aW1lb3V0SGFuZGxlciwgJ3JlcXVlc3QnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkZWxheXMuc29ja2V0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBzb2NrZXRUaW1lb3V0SGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgIHRpbWVvdXRIYW5kbGVyKGRlbGF5cy5zb2NrZXQsICdzb2NrZXQnKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVxdWVzdC5zZXRUaW1lb3V0KGRlbGF5cy5zb2NrZXQsIHNvY2tldFRpbWVvdXRIYW5kbGVyKTtcbiAgICAgICAgLy8gYHJlcXVlc3Quc2V0VGltZW91dCgwKWAgY2F1c2VzIGEgbWVtb3J5IGxlYWsuXG4gICAgICAgIC8vIFdlIGNhbiBqdXN0IHJlbW92ZSB0aGUgbGlzdGVuZXIgYW5kIGZvcmdldCBhYm91dCB0aGUgdGltZXIgLSBpdCdzIHVucmVmZmVkLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9nb3QvaXNzdWVzLzY5MFxuICAgICAgICBjYW5jZWxlcnMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKCd0aW1lb3V0Jywgc29ja2V0VGltZW91dEhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25jZShyZXF1ZXN0LCAnc29ja2V0JywgKHNvY2tldCkgPT4ge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHsgc29ja2V0UGF0aCB9ID0gcmVxdWVzdDtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGhhcmQgdG8gdGVzdCAqL1xuICAgICAgICBpZiAoc29ja2V0LmNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhc1BhdGggPSBCb29sZWFuKHNvY2tldFBhdGggIT09IG51bGwgJiYgc29ja2V0UGF0aCAhPT0gdm9pZCAwID8gc29ja2V0UGF0aCA6IG5ldC5pc0lQKChfYSA9IGhvc3RuYW1lICE9PSBudWxsICYmIGhvc3RuYW1lICE9PSB2b2lkIDAgPyBob3N0bmFtZSA6IGhvc3QpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnKSAhPT0gMCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlbGF5cy5sb29rdXAgIT09ICd1bmRlZmluZWQnICYmICFoYXNQYXRoICYmIHR5cGVvZiBzb2NrZXQuYWRkcmVzcygpLmFkZHJlc3MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2FuY2VsVGltZW91dCA9IGFkZFRpbWVvdXQoZGVsYXlzLmxvb2t1cCwgdGltZW91dEhhbmRsZXIsICdsb29rdXAnKTtcbiAgICAgICAgICAgICAgICBvbmNlKHNvY2tldCwgJ2xvb2t1cCcsIGNhbmNlbFRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkZWxheXMuY29ubmVjdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lQ29ubmVjdCA9ICgpID0+IGFkZFRpbWVvdXQoZGVsYXlzLmNvbm5lY3QsIHRpbWVvdXRIYW5kbGVyLCAnY29ubmVjdCcpO1xuICAgICAgICAgICAgICAgIGlmIChoYXNQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uY2Uoc29ja2V0LCAnY29ubmVjdCcsIHRpbWVDb25uZWN0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb25jZShzb2NrZXQsICdsb29rdXAnLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2Uoc29ja2V0LCAnY29ubmVjdCcsIHRpbWVDb25uZWN0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlbGF5cy5zZWN1cmVDb25uZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBvcHRpb25zLnByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAgICAgICAgICAgICAgIG9uY2Uoc29ja2V0LCAnY29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FuY2VsVGltZW91dCA9IGFkZFRpbWVvdXQoZGVsYXlzLnNlY3VyZUNvbm5lY3QsIHRpbWVvdXRIYW5kbGVyLCAnc2VjdXJlQ29ubmVjdCcpO1xuICAgICAgICAgICAgICAgICAgICBvbmNlKHNvY2tldCwgJ3NlY3VyZUNvbm5lY3QnLCBjYW5jZWxUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRlbGF5cy5zZW5kICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc3QgdGltZVJlcXVlc3QgPSAoKSA9PiBhZGRUaW1lb3V0KGRlbGF5cy5zZW5kLCB0aW1lb3V0SGFuZGxlciwgJ3NlbmQnKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBoYXJkIHRvIHRlc3QgKi9cbiAgICAgICAgICAgIGlmIChzb2NrZXQuY29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgIG9uY2Uoc29ja2V0LCAnY29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb25jZShyZXF1ZXN0LCAndXBsb2FkLWNvbXBsZXRlJywgdGltZVJlcXVlc3QoKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvbmNlKHJlcXVlc3QsICd1cGxvYWQtY29tcGxldGUnLCB0aW1lUmVxdWVzdCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgZGVsYXlzLnJlc3BvbnNlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBvbmNlKHJlcXVlc3QsICd1cGxvYWQtY29tcGxldGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjYW5jZWxUaW1lb3V0ID0gYWRkVGltZW91dChkZWxheXMucmVzcG9uc2UsIHRpbWVvdXRIYW5kbGVyLCAncmVzcG9uc2UnKTtcbiAgICAgICAgICAgIG9uY2UocmVxdWVzdCwgJ3Jlc3BvbnNlJywgY2FuY2VsVGltZW91dCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY2FuY2VsVGltZW91dHM7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/timed-out.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/unhandle.js":
/*!*************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/unhandle.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n// When attaching listeners, it's very easy to forget about them.\n// Especially if you do error handling and set timeouts.\n// So instead of checking if it's proper to throw an error on every timeout ever,\n// use this simple tool which will remove all listeners you have attached.\nexports[\"default\"] = () => {\n    const handlers = [];\n    return {\n        once(origin, event, fn) {\n            origin.once(event, fn);\n            handlers.push({ origin, event, fn });\n        },\n        unhandleAll() {\n            for (const handler of handlers) {\n                const { origin, event, fn } = handler;\n                origin.removeListener(event, fn);\n            }\n            handlers.length = 0;\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdW5oYW5kbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG1CQUFtQjtBQUMvQyxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcSGFja2F0aG9uXFxIYWNrc3BpcmVcXG5vZGVfbW9kdWxlc1xcZ290XFxkaXN0XFxzb3VyY2VcXGNvcmVcXHV0aWxzXFx1bmhhbmRsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIFdoZW4gYXR0YWNoaW5nIGxpc3RlbmVycywgaXQncyB2ZXJ5IGVhc3kgdG8gZm9yZ2V0IGFib3V0IHRoZW0uXG4vLyBFc3BlY2lhbGx5IGlmIHlvdSBkbyBlcnJvciBoYW5kbGluZyBhbmQgc2V0IHRpbWVvdXRzLlxuLy8gU28gaW5zdGVhZCBvZiBjaGVja2luZyBpZiBpdCdzIHByb3BlciB0byB0aHJvdyBhbiBlcnJvciBvbiBldmVyeSB0aW1lb3V0IGV2ZXIsXG4vLyB1c2UgdGhpcyBzaW1wbGUgdG9vbCB3aGljaCB3aWxsIHJlbW92ZSBhbGwgbGlzdGVuZXJzIHlvdSBoYXZlIGF0dGFjaGVkLlxuZXhwb3J0cy5kZWZhdWx0ID0gKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZXJzID0gW107XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb25jZShvcmlnaW4sIGV2ZW50LCBmbikge1xuICAgICAgICAgICAgb3JpZ2luLm9uY2UoZXZlbnQsIGZuKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnB1c2goeyBvcmlnaW4sIGV2ZW50LCBmbiB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5oYW5kbGVBbGwoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGhhbmRsZXIgb2YgaGFuZGxlcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9yaWdpbiwgZXZlbnQsIGZuIH0gPSBoYW5kbGVyO1xuICAgICAgICAgICAgICAgIG9yaWdpbi5yZW1vdmVMaXN0ZW5lcihldmVudCwgZm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlcnMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgIH07XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/unhandle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/url-to-options.js":
/*!*******************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/url-to-options.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nexports[\"default\"] = (url) => {\n    // Cast to URL\n    url = url;\n    const options = {\n        protocol: url.protocol,\n        hostname: is_1.default.string(url.hostname) && url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,\n        host: url.host,\n        hash: url.hash,\n        search: url.search,\n        pathname: url.pathname,\n        href: url.href,\n        path: `${url.pathname || ''}${url.search || ''}`\n    };\n    if (is_1.default.string(url.port) && url.port.length > 0) {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username || ''}:${url.password || ''}`;\n    }\n    return options;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdXJsLXRvLW9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDZFQUFrQjtBQUN2QyxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFtQixFQUFFLGlCQUFpQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG1CQUFtQixHQUFHLG1CQUFtQjtBQUNuRTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxIYWNrYXRob25cXEhhY2tzcGlyZVxcbm9kZV9tb2R1bGVzXFxnb3RcXGRpc3RcXHNvdXJjZVxcY29yZVxcdXRpbHNcXHVybC10by1vcHRpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaXNfMSA9IHJlcXVpcmUoXCJAc2luZHJlc29yaHVzL2lzXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gKHVybCkgPT4ge1xuICAgIC8vIENhc3QgdG8gVVJMXG4gICAgdXJsID0gdXJsO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIHByb3RvY29sOiB1cmwucHJvdG9jb2wsXG4gICAgICAgIGhvc3RuYW1lOiBpc18xLmRlZmF1bHQuc3RyaW5nKHVybC5ob3N0bmFtZSkgJiYgdXJsLmhvc3RuYW1lLnN0YXJ0c1dpdGgoJ1snKSA/IHVybC5ob3N0bmFtZS5zbGljZSgxLCAtMSkgOiB1cmwuaG9zdG5hbWUsXG4gICAgICAgIGhvc3Q6IHVybC5ob3N0LFxuICAgICAgICBoYXNoOiB1cmwuaGFzaCxcbiAgICAgICAgc2VhcmNoOiB1cmwuc2VhcmNoLFxuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBocmVmOiB1cmwuaHJlZixcbiAgICAgICAgcGF0aDogYCR7dXJsLnBhdGhuYW1lIHx8ICcnfSR7dXJsLnNlYXJjaCB8fCAnJ31gXG4gICAgfTtcbiAgICBpZiAoaXNfMS5kZWZhdWx0LnN0cmluZyh1cmwucG9ydCkgJiYgdXJsLnBvcnQubGVuZ3RoID4gMCkge1xuICAgICAgICBvcHRpb25zLnBvcnQgPSBOdW1iZXIodXJsLnBvcnQpO1xuICAgIH1cbiAgICBpZiAodXJsLnVzZXJuYW1lIHx8IHVybC5wYXNzd29yZCkge1xuICAgICAgICBvcHRpb25zLmF1dGggPSBgJHt1cmwudXNlcm5hbWUgfHwgJyd9OiR7dXJsLnBhc3N3b3JkIHx8ICcnfWA7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/url-to-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/core/utils/weakable-map.js":
/*!*****************************************************************!*\
  !*** ./node_modules/got/dist/source/core/utils/weakable-map.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass WeakableMap {\n    constructor() {\n        this.weakMap = new WeakMap();\n        this.map = new Map();\n    }\n    set(key, value) {\n        if (typeof key === 'object') {\n            this.weakMap.set(key, value);\n        }\n        else {\n            this.map.set(key, value);\n        }\n    }\n    get(key) {\n        if (typeof key === 'object') {\n            return this.weakMap.get(key);\n        }\n        return this.map.get(key);\n    }\n    has(key) {\n        if (typeof key === 'object') {\n            return this.weakMap.has(key);\n        }\n        return this.map.has(key);\n    }\n}\nexports[\"default\"] = WeakableMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvd2Vha2FibGUtbWFwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsiQzpcXEhhY2thdGhvblxcSGFja3NwaXJlXFxub2RlX21vZHVsZXNcXGdvdFxcZGlzdFxcc291cmNlXFxjb3JlXFx1dGlsc1xcd2Vha2FibGUtbWFwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgV2Vha2FibGVNYXAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLndlYWtNYXAgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aGlzLndlYWtNYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53ZWFrTWFwLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5nZXQoa2V5KTtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndlYWtNYXAuaGFzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmhhcyhrZXkpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFdlYWthYmxlTWFwO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/core/utils/weakable-map.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/create.js":
/*!************************************************!*\
  !*** ./node_modules/got/dist/source/create.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultHandler = void 0;\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst as_promise_1 = __webpack_require__(/*! ./as-promise */ \"(rsc)/./node_modules/got/dist/source/as-promise/index.js\");\nconst create_rejection_1 = __webpack_require__(/*! ./as-promise/create-rejection */ \"(rsc)/./node_modules/got/dist/source/as-promise/create-rejection.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/got/dist/source/core/index.js\");\nconst deep_freeze_1 = __webpack_require__(/*! ./utils/deep-freeze */ \"(rsc)/./node_modules/got/dist/source/utils/deep-freeze.js\");\nconst errors = {\n    RequestError: as_promise_1.RequestError,\n    CacheError: as_promise_1.CacheError,\n    ReadError: as_promise_1.ReadError,\n    HTTPError: as_promise_1.HTTPError,\n    MaxRedirectsError: as_promise_1.MaxRedirectsError,\n    TimeoutError: as_promise_1.TimeoutError,\n    ParseError: as_promise_1.ParseError,\n    CancelError: as_promise_1.CancelError,\n    UnsupportedProtocolError: as_promise_1.UnsupportedProtocolError,\n    UploadError: as_promise_1.UploadError\n};\n// The `delay` package weighs 10KB (!)\nconst delay = async (ms) => new Promise(resolve => {\n    setTimeout(resolve, ms);\n});\nconst { normalizeArguments } = core_1.default;\nconst mergeOptions = (...sources) => {\n    let mergedOptions;\n    for (const source of sources) {\n        mergedOptions = normalizeArguments(undefined, source, mergedOptions);\n    }\n    return mergedOptions;\n};\nconst getPromiseOrStream = (options) => options.isStream ? new core_1.default(undefined, options) : as_promise_1.default(options);\nconst isGotInstance = (value) => ('defaults' in value && 'options' in value.defaults);\nconst aliases = [\n    'get',\n    'post',\n    'put',\n    'patch',\n    'head',\n    'delete'\n];\nexports.defaultHandler = (options, next) => next(options);\nconst callInitHooks = (hooks, options) => {\n    if (hooks) {\n        for (const hook of hooks) {\n            hook(options);\n        }\n    }\n};\nconst create = (defaults) => {\n    // Proxy properties from next handlers\n    defaults._rawHandlers = defaults.handlers;\n    defaults.handlers = defaults.handlers.map(fn => ((options, next) => {\n        // This will be assigned by assigning result\n        let root;\n        const result = fn(options, newOptions => {\n            root = next(newOptions);\n            return root;\n        });\n        if (result !== root && !options.isStream && root) {\n            const typedResult = result;\n            const { then: promiseThen, catch: promiseCatch, finally: promiseFianlly } = typedResult;\n            Object.setPrototypeOf(typedResult, Object.getPrototypeOf(root));\n            Object.defineProperties(typedResult, Object.getOwnPropertyDescriptors(root));\n            // These should point to the new promise\n            // eslint-disable-next-line promise/prefer-await-to-then\n            typedResult.then = promiseThen;\n            typedResult.catch = promiseCatch;\n            typedResult.finally = promiseFianlly;\n        }\n        return result;\n    }));\n    // Got interface\n    const got = ((url, options = {}, _defaults) => {\n        var _a, _b;\n        let iteration = 0;\n        const iterateHandlers = (newOptions) => {\n            return defaults.handlers[iteration++](newOptions, iteration === defaults.handlers.length ? getPromiseOrStream : iterateHandlers);\n        };\n        // TODO: Remove this in Got 12.\n        if (is_1.default.plainObject(url)) {\n            const mergedOptions = {\n                ...url,\n                ...options\n            };\n            core_1.setNonEnumerableProperties([url, options], mergedOptions);\n            options = mergedOptions;\n            url = undefined;\n        }\n        try {\n            // Call `init` hooks\n            let initHookError;\n            try {\n                callInitHooks(defaults.options.hooks.init, options);\n                callInitHooks((_a = options.hooks) === null || _a === void 0 ? void 0 : _a.init, options);\n            }\n            catch (error) {\n                initHookError = error;\n            }\n            // Normalize options & call handlers\n            const normalizedOptions = normalizeArguments(url, options, _defaults !== null && _defaults !== void 0 ? _defaults : defaults.options);\n            normalizedOptions[core_1.kIsNormalizedAlready] = true;\n            if (initHookError) {\n                throw new as_promise_1.RequestError(initHookError.message, initHookError, normalizedOptions);\n            }\n            return iterateHandlers(normalizedOptions);\n        }\n        catch (error) {\n            if (options.isStream) {\n                throw error;\n            }\n            else {\n                return create_rejection_1.default(error, defaults.options.hooks.beforeError, (_b = options.hooks) === null || _b === void 0 ? void 0 : _b.beforeError);\n            }\n        }\n    });\n    got.extend = (...instancesOrOptions) => {\n        const optionsArray = [defaults.options];\n        let handlers = [...defaults._rawHandlers];\n        let isMutableDefaults;\n        for (const value of instancesOrOptions) {\n            if (isGotInstance(value)) {\n                optionsArray.push(value.defaults.options);\n                handlers.push(...value.defaults._rawHandlers);\n                isMutableDefaults = value.defaults.mutableDefaults;\n            }\n            else {\n                optionsArray.push(value);\n                if ('handlers' in value) {\n                    handlers.push(...value.handlers);\n                }\n                isMutableDefaults = value.mutableDefaults;\n            }\n        }\n        handlers = handlers.filter(handler => handler !== exports.defaultHandler);\n        if (handlers.length === 0) {\n            handlers.push(exports.defaultHandler);\n        }\n        return create({\n            options: mergeOptions(...optionsArray),\n            handlers,\n            mutableDefaults: Boolean(isMutableDefaults)\n        });\n    };\n    // Pagination\n    const paginateEach = (async function* (url, options) {\n        // TODO: Remove this `@ts-expect-error` when upgrading to TypeScript 4.\n        // Error: Argument of type 'Merge<Options, PaginationOptions<T, R>> | undefined' is not assignable to parameter of type 'Options | undefined'.\n        // @ts-expect-error\n        let normalizedOptions = normalizeArguments(url, options, defaults.options);\n        normalizedOptions.resolveBodyOnly = false;\n        const pagination = normalizedOptions.pagination;\n        if (!is_1.default.object(pagination)) {\n            throw new TypeError('`options.pagination` must be implemented');\n        }\n        const all = [];\n        let { countLimit } = pagination;\n        let numberOfRequests = 0;\n        while (numberOfRequests < pagination.requestLimit) {\n            if (numberOfRequests !== 0) {\n                // eslint-disable-next-line no-await-in-loop\n                await delay(pagination.backoff);\n            }\n            // @ts-expect-error FIXME!\n            // TODO: Throw when result is not an instance of Response\n            // eslint-disable-next-line no-await-in-loop\n            const result = (await got(undefined, undefined, normalizedOptions));\n            // eslint-disable-next-line no-await-in-loop\n            const parsed = await pagination.transform(result);\n            const current = [];\n            for (const item of parsed) {\n                if (pagination.filter(item, all, current)) {\n                    if (!pagination.shouldContinue(item, all, current)) {\n                        return;\n                    }\n                    yield item;\n                    if (pagination.stackAllItems) {\n                        all.push(item);\n                    }\n                    current.push(item);\n                    if (--countLimit <= 0) {\n                        return;\n                    }\n                }\n            }\n            const optionsToMerge = pagination.paginate(result, all, current);\n            if (optionsToMerge === false) {\n                return;\n            }\n            if (optionsToMerge === result.request.options) {\n                normalizedOptions = result.request.options;\n            }\n            else if (optionsToMerge !== undefined) {\n                normalizedOptions = normalizeArguments(undefined, optionsToMerge, normalizedOptions);\n            }\n            numberOfRequests++;\n        }\n    });\n    got.paginate = paginateEach;\n    got.paginate.all = (async (url, options) => {\n        const results = [];\n        for await (const item of paginateEach(url, options)) {\n            results.push(item);\n        }\n        return results;\n    });\n    // For those who like very descriptive names\n    got.paginate.each = paginateEach;\n    // Stream API\n    got.stream = ((url, options) => got(url, { ...options, isStream: true }));\n    // Shortcuts\n    for (const method of aliases) {\n        got[method] = ((url, options) => got(url, { ...options, method }));\n        got.stream[method] = ((url, options) => {\n            return got(url, { ...options, method, isStream: true });\n        });\n    }\n    Object.assign(got, errors);\n    Object.defineProperty(got, 'defaults', {\n        value: defaults.mutableDefaults ? defaults : deep_freeze_1.default(defaults),\n        writable: defaults.mutableDefaults,\n        configurable: defaults.mutableDefaults,\n        enumerable: true\n    });\n    got.mergeOptions = mergeOptions;\n    return got;\n};\nexports[\"default\"] = create;\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/got/dist/source/types.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/create.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/index.js":
/*!***********************************************!*\
  !*** ./node_modules/got/dist/source/index.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst create_1 = __webpack_require__(/*! ./create */ \"(rsc)/./node_modules/got/dist/source/create.js\");\nconst defaults = {\n    options: {\n        method: 'GET',\n        retry: {\n            limit: 2,\n            methods: [\n                'GET',\n                'PUT',\n                'HEAD',\n                'DELETE',\n                'OPTIONS',\n                'TRACE'\n            ],\n            statusCodes: [\n                408,\n                413,\n                429,\n                500,\n                502,\n                503,\n                504,\n                521,\n                522,\n                524\n            ],\n            errorCodes: [\n                'ETIMEDOUT',\n                'ECONNRESET',\n                'EADDRINUSE',\n                'ECONNREFUSED',\n                'EPIPE',\n                'ENOTFOUND',\n                'ENETUNREACH',\n                'EAI_AGAIN'\n            ],\n            maxRetryAfter: undefined,\n            calculateDelay: ({ computedValue }) => computedValue\n        },\n        timeout: {},\n        headers: {\n            'user-agent': 'got (https://github.com/sindresorhus/got)'\n        },\n        hooks: {\n            init: [],\n            beforeRequest: [],\n            beforeRedirect: [],\n            beforeRetry: [],\n            beforeError: [],\n            afterResponse: []\n        },\n        cache: undefined,\n        dnsCache: undefined,\n        decompress: true,\n        throwHttpErrors: true,\n        followRedirect: true,\n        isStream: false,\n        responseType: 'text',\n        resolveBodyOnly: false,\n        maxRedirects: 10,\n        prefixUrl: '',\n        methodRewriting: true,\n        ignoreInvalidCookies: false,\n        context: {},\n        // TODO: Set this to `true` when Got 12 gets released\n        http2: false,\n        allowGetBody: false,\n        https: undefined,\n        pagination: {\n            transform: (response) => {\n                if (response.request.options.responseType === 'json') {\n                    return response.body;\n                }\n                return JSON.parse(response.body);\n            },\n            paginate: response => {\n                if (!Reflect.has(response.headers, 'link')) {\n                    return false;\n                }\n                const items = response.headers.link.split(',');\n                let next;\n                for (const item of items) {\n                    const parsed = item.split(';');\n                    if (parsed[1].includes('next')) {\n                        next = parsed[0].trimStart().trim();\n                        next = next.slice(1, -1);\n                        break;\n                    }\n                }\n                if (next) {\n                    const options = {\n                        url: new url_1.URL(next)\n                    };\n                    return options;\n                }\n                return false;\n            },\n            filter: () => true,\n            shouldContinue: () => true,\n            countLimit: Infinity,\n            backoff: 0,\n            requestLimit: 10000,\n            stackAllItems: true\n        },\n        parseJson: (text) => JSON.parse(text),\n        stringifyJson: (object) => JSON.stringify(object),\n        cacheOptions: {}\n    },\n    handlers: [create_1.defaultHandler],\n    mutableDefaults: false\n};\nconst got = create_1.default(defaults);\nexports[\"default\"] = got;\n// For CommonJS default export support\nmodule.exports = got;\nmodule.exports[\"default\"] = got;\nmodule.exports.__esModule = true; // Workaround for TS issue: https://github.com/sindresorhus/got/pull/1267\n__exportStar(__webpack_require__(/*! ./create */ \"(rsc)/./node_modules/got/dist/source/create.js\"), exports);\n__exportStar(__webpack_require__(/*! ./as-promise */ \"(rsc)/./node_modules/got/dist/source/as-promise/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLG1DQUFtQyxvQ0FBb0MsZ0JBQWdCO0FBQ3ZGLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjLG1CQUFPLENBQUMsZ0JBQUs7QUFDM0IsaUJBQWlCLG1CQUFPLENBQUMsZ0VBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGVBQWU7QUFDOUMsU0FBUztBQUNULG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZjtBQUNBO0FBQ0EseUJBQXNCO0FBQ3RCLHlCQUF5QixTQUFTO0FBQ2xDLGFBQWEsbUJBQU8sQ0FBQyxnRUFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsOEVBQWMiLCJzb3VyY2VzIjpbIkM6XFxIYWNrYXRob25cXEhhY2tzcGlyZVxcbm9kZV9tb2R1bGVzXFxnb3RcXGRpc3RcXHNvdXJjZVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHVybF8xID0gcmVxdWlyZShcInVybFwiKTtcbmNvbnN0IGNyZWF0ZV8xID0gcmVxdWlyZShcIi4vY3JlYXRlXCIpO1xuY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgb3B0aW9uczoge1xuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICByZXRyeToge1xuICAgICAgICAgICAgbGltaXQ6IDIsXG4gICAgICAgICAgICBtZXRob2RzOiBbXG4gICAgICAgICAgICAgICAgJ0dFVCcsXG4gICAgICAgICAgICAgICAgJ1BVVCcsXG4gICAgICAgICAgICAgICAgJ0hFQUQnLFxuICAgICAgICAgICAgICAgICdERUxFVEUnLFxuICAgICAgICAgICAgICAgICdPUFRJT05TJyxcbiAgICAgICAgICAgICAgICAnVFJBQ0UnXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgc3RhdHVzQ29kZXM6IFtcbiAgICAgICAgICAgICAgICA0MDgsXG4gICAgICAgICAgICAgICAgNDEzLFxuICAgICAgICAgICAgICAgIDQyOSxcbiAgICAgICAgICAgICAgICA1MDAsXG4gICAgICAgICAgICAgICAgNTAyLFxuICAgICAgICAgICAgICAgIDUwMyxcbiAgICAgICAgICAgICAgICA1MDQsXG4gICAgICAgICAgICAgICAgNTIxLFxuICAgICAgICAgICAgICAgIDUyMixcbiAgICAgICAgICAgICAgICA1MjRcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBlcnJvckNvZGVzOiBbXG4gICAgICAgICAgICAgICAgJ0VUSU1FRE9VVCcsXG4gICAgICAgICAgICAgICAgJ0VDT05OUkVTRVQnLFxuICAgICAgICAgICAgICAgICdFQUREUklOVVNFJyxcbiAgICAgICAgICAgICAgICAnRUNPTk5SRUZVU0VEJyxcbiAgICAgICAgICAgICAgICAnRVBJUEUnLFxuICAgICAgICAgICAgICAgICdFTk9URk9VTkQnLFxuICAgICAgICAgICAgICAgICdFTkVUVU5SRUFDSCcsXG4gICAgICAgICAgICAgICAgJ0VBSV9BR0FJTidcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtYXhSZXRyeUFmdGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjYWxjdWxhdGVEZWxheTogKHsgY29tcHV0ZWRWYWx1ZSB9KSA9PiBjb21wdXRlZFZhbHVlXG4gICAgICAgIH0sXG4gICAgICAgIHRpbWVvdXQ6IHt9LFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAndXNlci1hZ2VudCc6ICdnb3QgKGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZ290KSdcbiAgICAgICAgfSxcbiAgICAgICAgaG9va3M6IHtcbiAgICAgICAgICAgIGluaXQ6IFtdLFxuICAgICAgICAgICAgYmVmb3JlUmVxdWVzdDogW10sXG4gICAgICAgICAgICBiZWZvcmVSZWRpcmVjdDogW10sXG4gICAgICAgICAgICBiZWZvcmVSZXRyeTogW10sXG4gICAgICAgICAgICBiZWZvcmVFcnJvcjogW10sXG4gICAgICAgICAgICBhZnRlclJlc3BvbnNlOiBbXVxuICAgICAgICB9LFxuICAgICAgICBjYWNoZTogdW5kZWZpbmVkLFxuICAgICAgICBkbnNDYWNoZTogdW5kZWZpbmVkLFxuICAgICAgICBkZWNvbXByZXNzOiB0cnVlLFxuICAgICAgICB0aHJvd0h0dHBFcnJvcnM6IHRydWUsXG4gICAgICAgIGZvbGxvd1JlZGlyZWN0OiB0cnVlLFxuICAgICAgICBpc1N0cmVhbTogZmFsc2UsXG4gICAgICAgIHJlc3BvbnNlVHlwZTogJ3RleHQnLFxuICAgICAgICByZXNvbHZlQm9keU9ubHk6IGZhbHNlLFxuICAgICAgICBtYXhSZWRpcmVjdHM6IDEwLFxuICAgICAgICBwcmVmaXhVcmw6ICcnLFxuICAgICAgICBtZXRob2RSZXdyaXRpbmc6IHRydWUsXG4gICAgICAgIGlnbm9yZUludmFsaWRDb29raWVzOiBmYWxzZSxcbiAgICAgICAgY29udGV4dDoge30sXG4gICAgICAgIC8vIFRPRE86IFNldCB0aGlzIHRvIGB0cnVlYCB3aGVuIEdvdCAxMiBnZXRzIHJlbGVhc2VkXG4gICAgICAgIGh0dHAyOiBmYWxzZSxcbiAgICAgICAgYWxsb3dHZXRCb2R5OiBmYWxzZSxcbiAgICAgICAgaHR0cHM6IHVuZGVmaW5lZCxcbiAgICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmVxdWVzdC5vcHRpb25zLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5ib2R5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYWdpbmF0ZTogcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghUmVmbGVjdC5oYXMocmVzcG9uc2UuaGVhZGVycywgJ2xpbmsnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gcmVzcG9uc2UuaGVhZGVycy5saW5rLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICAgICAgbGV0IG5leHQ7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IGl0ZW0uc3BsaXQoJzsnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlZFsxXS5pbmNsdWRlcygnbmV4dCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gcGFyc2VkWzBdLnRyaW1TdGFydCgpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgPSBuZXh0LnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG5ldyB1cmxfMS5VUkwobmV4dClcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWx0ZXI6ICgpID0+IHRydWUsXG4gICAgICAgICAgICBzaG91bGRDb250aW51ZTogKCkgPT4gdHJ1ZSxcbiAgICAgICAgICAgIGNvdW50TGltaXQ6IEluZmluaXR5LFxuICAgICAgICAgICAgYmFja29mZjogMCxcbiAgICAgICAgICAgIHJlcXVlc3RMaW1pdDogMTAwMDAsXG4gICAgICAgICAgICBzdGFja0FsbEl0ZW1zOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHBhcnNlSnNvbjogKHRleHQpID0+IEpTT04ucGFyc2UodGV4dCksXG4gICAgICAgIHN0cmluZ2lmeUpzb246IChvYmplY3QpID0+IEpTT04uc3RyaW5naWZ5KG9iamVjdCksXG4gICAgICAgIGNhY2hlT3B0aW9uczoge31cbiAgICB9LFxuICAgIGhhbmRsZXJzOiBbY3JlYXRlXzEuZGVmYXVsdEhhbmRsZXJdLFxuICAgIG11dGFibGVEZWZhdWx0czogZmFsc2Vcbn07XG5jb25zdCBnb3QgPSBjcmVhdGVfMS5kZWZhdWx0KGRlZmF1bHRzKTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdvdDtcbi8vIEZvciBDb21tb25KUyBkZWZhdWx0IGV4cG9ydCBzdXBwb3J0XG5tb2R1bGUuZXhwb3J0cyA9IGdvdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBnb3Q7XG5tb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsgLy8gV29ya2Fyb3VuZCBmb3IgVFMgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZ290L3B1bGwvMTI2N1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NyZWF0ZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXMtcHJvbWlzZVwiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/types.js":
/*!***********************************************!*\
  !*** ./node_modules/got/dist/source/types.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDIiwic291cmNlcyI6WyJDOlxcSGFja2F0aG9uXFxIYWNrc3BpcmVcXG5vZGVfbW9kdWxlc1xcZ290XFxkaXN0XFxzb3VyY2VcXHR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/utils/deep-freeze.js":
/*!***********************************************************!*\
  !*** ./node_modules/got/dist/source/utils/deep-freeze.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(rsc)/./node_modules/@sindresorhus/is/dist/index.js\");\nfunction deepFreeze(object) {\n    for (const value of Object.values(object)) {\n        if (is_1.default.plainObject(value) || is_1.default.array(value)) {\n            deepFreeze(value);\n        }\n    }\n    return Object.freeze(object);\n}\nexports[\"default\"] = deepFreeze;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3V0aWxzL2RlZXAtZnJlZXplLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyw2RUFBa0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlIiwic291cmNlcyI6WyJDOlxcSGFja2F0aG9uXFxIYWNrc3BpcmVcXG5vZGVfbW9kdWxlc1xcZ290XFxkaXN0XFxzb3VyY2VcXHV0aWxzXFxkZWVwLWZyZWV6ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGlzXzEgPSByZXF1aXJlKFwiQHNpbmRyZXNvcmh1cy9pc1wiKTtcbmZ1bmN0aW9uIGRlZXBGcmVlemUob2JqZWN0KSB7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBPYmplY3QudmFsdWVzKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5wbGFpbk9iamVjdCh2YWx1ZSkgfHwgaXNfMS5kZWZhdWx0LmFycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVlcEZyZWV6ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUob2JqZWN0KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlZXBGcmVlemU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/utils/deep-freeze.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/got/dist/source/utils/deprecation-warning.js":
/*!*******************************************************************!*\
  !*** ./node_modules/got/dist/source/utils/deprecation-warning.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst alreadyWarned = new Set();\nexports[\"default\"] = (message) => {\n    if (alreadyWarned.has(message)) {\n        return;\n    }\n    alreadyWarned.add(message);\n    // @ts-expect-error Missing types.\n    process.emitWarning(`Got: ${message}`, {\n        type: 'DeprecationWarning'\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3V0aWxzL2RlcHJlY2F0aW9uLXdhcm5pbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQSxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsUUFBUTtBQUN4QztBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsiQzpcXEhhY2thdGhvblxcSGFja3NwaXJlXFxub2RlX21vZHVsZXNcXGdvdFxcZGlzdFxcc291cmNlXFx1dGlsc1xcZGVwcmVjYXRpb24td2FybmluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFscmVhZHlXYXJuZWQgPSBuZXcgU2V0KCk7XG5leHBvcnRzLmRlZmF1bHQgPSAobWVzc2FnZSkgPT4ge1xuICAgIGlmIChhbHJlYWR5V2FybmVkLmhhcyhtZXNzYWdlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFscmVhZHlXYXJuZWQuYWRkKG1lc3NhZ2UpO1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgTWlzc2luZyB0eXBlcy5cbiAgICBwcm9jZXNzLmVtaXRXYXJuaW5nKGBHb3Q6ICR7bWVzc2FnZX1gLCB7XG4gICAgICAgIHR5cGU6ICdEZXByZWNhdGlvbldhcm5pbmcnXG4gICAgfSk7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/got/dist/source/utils/deprecation-warning.js\n");

/***/ })

};
;